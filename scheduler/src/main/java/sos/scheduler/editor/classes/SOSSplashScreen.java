/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package sos.scheduler.editor.classes;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Monitor;
import org.eclipse.swt.widgets.Shell;

/**
 * \class SOSSplashScreen 
 * 
 * \brief SOSSplashScreen - 
 * 
 * \details
 *
 *
 * \code
 *   .... code goes here ...
 * \endcode
 *
 * <p style="text-align:center">
 * <br />---------------------------------------------------------------------------
 * <br /> APL/Software GmbH - Berlin
 * <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
 * <br />---------------------------------------------------------------------------
 * </p>
 * \author KB
 * \version $Id: SOSSplashScreen.java 17419 2012-06-21 17:19:52Z ur $
 * \see reference
 *
 * Created on 07.02.2012 16:54:49
 */

/**
 * @author 
 *         http://www.tutorials.de/swing-java2d-3d-swt-jface/195899-swt-splashscreen
 *         -thread-problem.html
 * 
 */
public class SOSSplashScreen {

    @SuppressWarnings("unused") private final String conClassName = "SOSSplashScreen";
    private static final String conSVNVersion = "$Id: SOSSplashScreen.java 17419 2012-06-21 17:19:52Z ur $";
    private static final Logger logger = Logger.getLogger(SOSSplashScreen.class);

    public SOSSplashScreen() {
        //
    }

    /**
     * @param args
     */
    public static void main(String[] args) throws Exception {
        Display display = Display.getDefault();
        final Shell shell = new Shell();
        shell.setText("MainWND");

        Method m = SOSSplashScreen.class.getMethod("openApplicationMainWnd", new Class[] { Shell.class });

        SOSSplashScreen.startJOEExecuteLoop(shell, new Runnable() {
            public void run() {
                doSomeTimeconsumingOperation();
            }
        }, new Image(display, SOSSplashScreen.class.getResourceAsStream("/SplashScreenJOE.bmp")), m, 2000);
    }

    public static void startJOEExecuteLoop(final Shell pobjParentShell, final Runnable pobjRunnable, final Image pobjImage2Show, final Method m, final int pintHowLong2Show) throws Exception {

        final Shell splashShell = new Shell(pobjParentShell, SWT.NONE);

        final Display display = splashShell.getDisplay();

        if (pobjImage2Show != null) {
            splashShell.setCursor(new Cursor(display, SWT.CURSOR_WAIT));
            splashShell.setLayout(new FillLayout());

            Label label = new Label(splashShell, SWT.BORDER);
            label.setImage(pobjImage2Show);
            splashShell.pack();

            // center the dialog screen to the monitor
            Monitor primary = display.getPrimaryMonitor();
            Rectangle bounds = primary.getBounds();
            Rectangle rect = splashShell.getBounds();
            int x = bounds.x + (bounds.width - rect.width) / 2;
            int y = bounds.y + (bounds.height - rect.height) / 2;
            splashShell.setLocation(x, y);

            splashShell.open();
        }

        display.asyncExec(new Runnable() {
            public void run() {
                // Zeige den SplashScreen auf jeden Fall delay/1000 Sekunden an.
                display.timerExec(pintHowLong2Show, new Runnable() {
                    public void run() {
                        // nun erledige die eigentliche "Initialsierungsroutine"
                        pobjRunnable.run();
                        splashShell.close();
                        splashShell.dispose();
                    }
                });
            }
        });

        while (!splashShell.isDisposed()) {
            if (!display.readAndDispatch()) {
                display.sleep();
            }
        }
        // splashShell.setCursor(new Cursor(display, SWT.CURSOR_ARROW));
        // Lade den eigentlichen Applikations Code -> Hauptfenster...
        m.invoke(null, new Object[] { pobjParentShell });

    }

    private static void doSomeTimeconsumingOperation() {
        System.out.println("Executing some importent initial environment checks...");
        try {
            Thread.sleep(5000L);
        }
        catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("finished");
    }

    public static void openApplicationMainWnd(Shell shell) {
        System.out.println("now let#s do the real hard work...");
        shell.open();

        Display d = shell.getDisplay();

        while (!shell.isDisposed()) {
            if (!d.readAndDispatch()) {
                d.sleep();
            }
        }
    }
}
