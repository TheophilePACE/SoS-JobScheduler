/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package sos.scheduler.file;
import static com.sos.scheduler.messages.JSMessages.JSJ_F_0010;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.i18n.annotation.I18NResourceBundle;
/**
* \class JobSchedulerCreateFiles
*
* \brief JobSchedulerCreateFiles -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id: JobSchedulerCreateFiles.java 18220 2012-10-18 07:46:10Z kb $
* \see reference
*
* Created on 27.07.2011 19:06:05
 */

@I18NResourceBundle(baseName = "com.sos.scheduler.messages", defaultLocale = "en")
public class JobSchedulerCreateFiles extends JobSchedulerFileOperationBase {
	private static final String	conParameterFILE_AGE	= "file_age";
	private static final String	conParameterFILE_SIZE	= "file_size";
	private static final String	conParameterCREATE_FILE	= "create_file";
	private final String		conClassName			= "JobSchedulerCreateFiles";
	private static final String	conSVNVersion			= "$Id: JobSchedulerCreateFiles.java 18220 2012-10-18 07:46:10Z kb $";
	private static final Logger	logger					= Logger.getLogger(JobSchedulerCreateFiles.class);

	@Override
	public boolean spooler_process() {
		int fileSize;
		long fileAge;
		try {
			initialize(conSVNVersion);
			String strCreateFile = getParamValue(conParameterCREATE_FILE);
			if (isNotEmpty(strCreateFile)) {
				fileSize = getParamInteger(conParameterFILE_SIZE, 10);
				fileAge = getFileAge(getParamValue(conParameterFILE_AGE));
				populateFile(new JSFile(strCreateFile), fileSize, fileAge);
			}
			for (int i = 0; i < 20; i++) {
				String strFileName2Create = getParamValue(conParameterCREATE_FILE + "_" + i);
				if (isNotEmpty(strFileName2Create)) {
					fileSize = getParamInteger(conParameterFILE_SIZE + "_" + i, 10);
					fileAge = getFileAge(getParamValue(conParameterFILE_AGE + "_" + i));
					populateFile(new JSFile(strFileName2Create), fileSize, fileAge);
				}
			}
			return signalSuccess();
		}
		catch (Exception e) {
			String strM = JSJ_F_0010.params( conClassName, e.getLocalizedMessage());
			logger.fatal(strM);
			throw new JobSchedulerException(strM);
		}
	}

	public long getFileAge(final String pstrFileAge) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getFileAge";
		long fileAge = System.currentTimeMillis();
		;
		if (isNotEmpty(pstrFileAge)) {
			fileAge = System.currentTimeMillis() - 1000 * Long.parseLong(spooler_task.order().params().var(conParameterFILE_AGE));
		}
		return fileAge;
	} // private long getFileAge

	public void populateFile(final JSFile file1, final int fileSize, final long lastModified) throws Exception {
		try {
			logger.info("populating file: " + file1.getName() + "   " + file1.getAbsolutePath());
			file1.Write(new StringBuffer(fileSize));
		}
		catch (Exception e) {
			throw new Exception("could not populate file [" + file1.getAbsolutePath() + "]: " + e.getMessage());
		}
		finally {
			try {
				file1.close();
				file1.setLastModified(lastModified);
			}
			catch (Exception x) {
			}
		}
	}
}
