/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.dailyschedule.classes;

 

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
 
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Table;
 
import com.sos.dailyschedule.db.DailyScheduleDBItem;
import com.sos.dialog.classes.SOSTableItem;
import com.sos.hibernate.classes.DbItem;
import com.sos.hibernate.interfaces.ISOSTableItem;

/**
* \class DailyScheduleTableItem 
* 
* \brief DailyScheduleTableItem - 
* 
* \details
*
* \section DailyScheduleTableItem.java_intro_sec Introduction
*
* \section DailyScheduleTableItem.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 14.12.2011
* \see reference
*
* Created on 14.12.2011 13:51:13
 */

public class SosDailyScheduleTableItem extends SOSTableItem implements ISOSTableItem {
    private static final int ERROR_COLUMN_NUMBER = 7;
    private static final int STATUS_COLUMN_NUMBER = 8;
    private DailyScheduleDBItem dailyScheduleDBItem=null;
    private  String[] textBuffer = null;
 
	private static Logger					logger						= Logger.getLogger(SosDailyScheduleTableItem.class);


	public SosDailyScheduleTableItem(Table arg0, int arg1) {
		super(arg0, arg1);
 	}
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
		} 
	
	public DbItem getData() {
		return (DailyScheduleDBItem) super.getData();
	}
	
	public void setDBItem(DbItem d) {
		dailyScheduleDBItem = (DailyScheduleDBItem) d;
		this.setData(d);
	}
	
	 
    
	public void setColor() {
         org.eclipse.swt.graphics.Color magenta = Display.getDefault().getSystemColor(SWT.COLOR_DARK_MAGENTA);
         org.eclipse.swt.graphics.Color red = Display.getDefault().getSystemColor(SWT.COLOR_RED);
 	     org.eclipse.swt.graphics.Color blue = Display.getDefault().getSystemColor(SWT.COLOR_BLUE);
		 org.eclipse.swt.graphics.Color white = Display.getDefault().getSystemColor(SWT.COLOR_WHITE);
		 org.eclipse.swt.graphics.Color gray = Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW);
		 org.eclipse.swt.graphics.Color black = Display.getDefault().getSystemColor(SWT.COLOR_BLACK);
		 org.eclipse.swt.graphics.Color yellow = Display.getDefault().getSystemColor(SWT.COLOR_YELLOW);
		 
		if (dailyScheduleDBItem.getExecutionState().singleStart()) {
			this.setForeground(black);  //SingleStart
		}else {
			this.setForeground(blue);   //Periodische Ausführung
		}
		
 
		if (dailyScheduleDBItem.getScheduleExecuted() == null) {  //Keine Ausführung
			if (dailyScheduleDBItem.getExecutionState().isLate()) { //Hätte ausgeführt werden müssen
                this.setBackground(0,magenta);
                this.setForeground(0,white);
                this.setBackground(STATUS_COLUMN_NUMBER,magenta);
                this.setForeground(STATUS_COLUMN_NUMBER,white);
			}else {
                this.setBackground(0,gray);  //Ausführung in der Zukunft
                this.setBackground(STATUS_COLUMN_NUMBER,gray);  //Ausführung in der Zukunft
			}
		}else {
 			this.setBackground(white);
			if (dailyScheduleDBItem.haveError()) { //Fehlerhafte Ausführung
                this.setBackground(0,red);
                this.setForeground(0,white);
                this.setBackground(ERROR_COLUMN_NUMBER,red);
                this.setForeground(ERROR_COLUMN_NUMBER,white);
            }else {
			if (dailyScheduleDBItem.getExecutionState().isLate()) { //Verspätete Ausführung
                this.setBackground(0,yellow);
                this.setBackground(STATUS_COLUMN_NUMBER,yellow);
			}
            }
		}
		colorSave();
        
        
	}
	
	public void setColumns() {
		DailyScheduleDBItem d = dailyScheduleDBItem;

		logger.debug("...creating tableItem: " + d.getName() + ":" + getParent().getItemCount());

		
		textBuffer = new String[] { "",d.getSchedulerId(),
				                    d.getJobOrJobchain(), 
				                    
				                    d.getSchedulePlannedFormated(),
				                    d.getScheduleExecutedFormated(),
				                    d.getScheduleEndedFormated(),
				                    d.getDurationFormated(),
				                    String.valueOf(d.getResultValue()),
				                    d.getExecutionState().getExecutionState(),
				                    d.getExecutionState().getLate() 
				                    };
		
		/* textBuffer = new String[] { d.getSchedulerId(),
				                    d.getJobNotNull(), 
				                    d.getJobChainNotNull(),
				                    d.getOrderIdNotNull(),
				                    d.getSchedulePlannedFormated(),
				                    d.getScheduleExecutedFormated(),
				                    d.getScheduleEndedFormated(),
				                    String.valueOf(d.getResultValue()),
				                    d.getExecutionState().getExecutionState(),
				                    d.getExecutionState().getLate() 
				                    }; */
		this.setText(textBuffer);
	}
	
	public String[] getTextBuffer() {
		return textBuffer;
	}
	@SuppressWarnings("unused")
	private final String	conClassName	= "DailyScheduleTableItem";


    @Override
    public Color[] getBackgroundColumn() {
       return colorsBackground;
    }
    @Override
    public Color[] getForegroundColumn() {
        return colorsForeground;
    }
    
    @Override
    public Color getBackground() {
        return null;
    }
    @Override
    public Color getForeground() {
        return null;
    }
    @Override
    public void setForeground(Color c) {        
    }
    
    @Override
    public boolean isDisposed() {
        // TODO Auto-generated method stub
        return false;
    }


 
	

}
