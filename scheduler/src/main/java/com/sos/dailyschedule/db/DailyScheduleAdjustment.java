/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.dailyschedule.db;


import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import com.sos.dailyschedule.job.CheckDailyScheduleOptions;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBLayer;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBLayer;

/**
* \class DaysScheduleAdjustment 
* 
* \brief DaysScheduleAdjustment - 
* 
* \details
*
* \section DaysScheduleAdjustment.java_intro_sec Introduction
*
* \section DaysScheduleAdjustment.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 27.09.2011
* \see reference
*
* Created on 27.09.2011 09:52:55
 */

public class DailyScheduleAdjustment {

	@SuppressWarnings("unused")
	private final String	conClassName	= "DaysScheduleAdjustment";
	private DailyScheduleDBLayer dailyScheduleDBLayer;
	private SchedulerTaskHistoryDBLayer schedulerTaskHistoryDBLayer;
	private SchedulerOrderHistoryDBLayer schedulerOrderHistoryDBLayer;
	private String dateFormat = "yyyy-MM-dd'T'HH:mm:ss";
    private String schedulerId;
	private Date from;
	private Date to;
	private int dayOffset;
	private CheckDailyScheduleOptions options=null;


	public DailyScheduleAdjustment(File configurationFile) {
		dailyScheduleDBLayer = new DailyScheduleDBLayer(configurationFile);
		schedulerTaskHistoryDBLayer = new SchedulerTaskHistoryDBLayer(configurationFile); 
		schedulerOrderHistoryDBLayer = new SchedulerOrderHistoryDBLayer(configurationFile); 
		
		//
	}
	
	private void adjustDaysScheduleItem(DailyScheduleDBItem dailyScheduleItem,List <SchedulerTaskHistoryDBItem> schedulerHistoryList) {

        for (int i = 0; i<schedulerHistoryList.size(); i++) {
        	SchedulerTaskHistoryDBItem schedulerHistoryDBItem = (SchedulerTaskHistoryDBItem) schedulerHistoryList.get(i);
        	if (!schedulerHistoryDBItem .isAssignToDaysScheduler() && !dailyScheduleDBLayer.contains(schedulerHistoryDBItem)) {
            	if (dailyScheduleItem.isStandalone() && dailyScheduleItem.isEqual(schedulerHistoryDBItem)){
            	    	dailyScheduleItem.setScheduleExecuted(schedulerHistoryDBItem.getStartTime());
            	    	dailyScheduleItem.setSchedulerHistoryId(schedulerHistoryDBItem.getId());
            	    	dailyScheduleItem.setStatus(1);
            	    	dailyScheduleItem.setResult(schedulerHistoryDBItem.getExitCode());
            	    	dailyScheduleDBLayer.update(dailyScheduleItem);
            	    	schedulerHistoryDBItem.setAssignToDaysScheduler(true);
            		}
            	}
             }
	}
	
    private void adjustDaysScheduleOrderItem(DailyScheduleDBItem dailyScheduleItem, List<SchedulerOrderHistoryDBItem> schedulerOrderHistoryList) {

        for (int i = 0; i < schedulerOrderHistoryList.size(); i++) {
            SchedulerOrderHistoryDBItem schedulerOrderHistoryDBItem = (SchedulerOrderHistoryDBItem) schedulerOrderHistoryList.get(i);


            if (!schedulerOrderHistoryDBItem.isAssignToDaysScheduler() && !dailyScheduleDBLayer.contains(schedulerOrderHistoryDBItem)) {
                if (dailyScheduleItem.isOrderJob() && dailyScheduleItem.isEqual(schedulerOrderHistoryDBItem)) {
                    dailyScheduleItem.setScheduleExecuted(schedulerOrderHistoryDBItem.getStartTime());
                    dailyScheduleItem.setSchedulerOrderHistoryId(schedulerOrderHistoryDBItem.getHistoryId());
                   
                    dailyScheduleItem.setStatus(1);  

                    if (schedulerOrderHistoryDBItem.haveError()) {
                        dailyScheduleItem.setResult(1);
                    }
                    else {
                        dailyScheduleItem.setResult(0);
                    }
                    dailyScheduleDBLayer.update(dailyScheduleItem);
                    schedulerOrderHistoryDBItem.setAssignToDaysScheduler(true);
                }
            }
        }

    }
	
	public void adjustWithHistory()  {

		//Read daysScheduler
		
		dailyScheduleDBLayer.setWhereSchedulerId(this.schedulerId);
		dailyScheduleDBLayer.setWhereFrom(from);
		dailyScheduleDBLayer.setWhereTo(to);

		List <DailyScheduleDBItem> dailyScheduleList = dailyScheduleDBLayer.getWaitingDailyScheduleList(-1);

		//read scheduler history
		schedulerTaskHistoryDBLayer.getFilter().setLimit(-1);
		schedulerTaskHistoryDBLayer.getFilter().setSchedulerId(this.schedulerId);
		schedulerTaskHistoryDBLayer.getFilter().setExecutedFrom(dailyScheduleDBLayer.getWhereFrom());
		schedulerTaskHistoryDBLayer.getFilter().setExecutedTo(dailyScheduleDBLayer.getWhereTo());
		List <SchedulerTaskHistoryDBItem> schedulerHistoryList = schedulerTaskHistoryDBLayer.getSchedulerHistoryListFromTo();
		
		//read scheduler Order history
		schedulerOrderHistoryDBLayer.getFilter().setLimit(-1);
		schedulerOrderHistoryDBLayer.getFilter().setSchedulerId(this.schedulerId);
		schedulerOrderHistoryDBLayer.getFilter().setExecutedFrom(dailyScheduleDBLayer.getWhereFrom());
		schedulerOrderHistoryDBLayer.getFilter().setExecutedTo(dailyScheduleDBLayer.getWhereTo());
 		List <SchedulerOrderHistoryDBItem> schedulerOrderHistoryList = schedulerOrderHistoryDBLayer.getSchedulerOrderHistoryListFromTo();
 		   
		dailyScheduleDBLayer.beginTransaction();
        for (int i = 0; i<dailyScheduleList.size(); i++) {
        	DailyScheduleDBItem daysScheduleItem = (DailyScheduleDBItem) dailyScheduleList.get(i);
        	if (daysScheduleItem.isStandalone()) {
           	   adjustDaysScheduleItem(daysScheduleItem, schedulerHistoryList);
          	}else {
        	   adjustDaysScheduleOrderItem(daysScheduleItem, schedulerOrderHistoryList);
        	}
        }
    	dailyScheduleDBLayer.commit();

	}
	
	private void setFrom() throws ParseException {
		Date now = new Date();
		if (dayOffset < 0) {
		   GregorianCalendar calendar = new GregorianCalendar();
		   calendar.setTime(now);
		   calendar.add(GregorianCalendar.DAY_OF_MONTH, dayOffset);
		   now = calendar.getTime();
		}

		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String froms = formatter.format(now);
    	froms = froms + "T00:00:00";
		formatter = new SimpleDateFormat(dateFormat);
		this.from = formatter.parse(froms);	
	}
	
	private void setTo() throws ParseException {
		Date now = new Date();
		if (dayOffset > 0) {
		   GregorianCalendar calendar = new GregorianCalendar();
		   calendar.setTime(now);
		   calendar.add(GregorianCalendar.DAY_OF_MONTH, dayOffset);
		   now = calendar.getTime();
		}

		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String tos = formatter.format(now);
    	tos = tos + "T23:59:59";
		formatter = new SimpleDateFormat(dateFormat);
		this.to = formatter.parse(tos);
	}
	
	public Date getFrom() {
		return from;
	}

	public Date getTo() {
		return to;
	}

	public void setOptions(CheckDailyScheduleOptions options) throws ParseException {
		this.options = options;
		schedulerId = this.options.getscheduler_id().Value();
		dayOffset = this.options.getdayOffset().value();
		setFrom();
		setTo();
	}

}
