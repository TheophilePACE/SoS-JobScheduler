/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.jobnet.db;

import com.sos.hibernate.layer.SOSHibernateDBLayer;
import org.apache.log4j.Logger;
import org.hibernate.Query;

import java.io.File;
import java.util.List;

// import org.apache.log4j.Logger;

/**
 * 
 * \class SchedulerJobNetDBLayer \brief SchedulerJobNetDBLayer -
 * 
 * \details
 * 
 * \section SchedulerJobNetDBLayer.java_intro_sec Introduction
 * 
 * \section SchedulerJobNetDBLayer.java_samples Some Samples
 * 
 * \code .... code goes here ... \endcode
 * 
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 13.08.2013 \see reference
 * 
 * Created on 13.08.2013 14:40:18
 */

public class JobNetDBLayer extends SOSHibernateDBLayer {
	 
    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";

    private static final String NET_ID = "netId";
    private static final String JOBNET = "jobNet";
    private static final String SCHEDULER_ID = "schedulerId";
    
    private final static Logger logger = Logger.getLogger(JobNetDBLayer.class);

    @SuppressWarnings("unused")
    private final String conClassName = "SchedulerJobNetDBLayer";
    public final String conSVNVersion = "$Id: SchedulerJobNetDBLayer.java 20037 2013-05-03 04:55:36Z ss $";
 

    private JobNetFilter filter = null;
 
    public JobNetDBLayer(File configurationFile_, String schedulerId_) {
        super();

        this.filter = new JobNetFilter();

        this.filter.setSchedulerId(schedulerId_);

        this.setConfigurationFile(configurationFile_);
        this.filter = new JobNetFilter();
        this.filter.setDateFormat(DATE_FORMAT);
        this.filter.setOrderCriteria(JOBNET);
        this.filter.setSchedulerId(schedulerId_);
    }

    public JobNetDBLayer(File configurationFile_) {
        super();
        this.filter = new JobNetFilter();

        this.setConfigurationFile(configurationFile_);
        this.filter = new JobNetFilter();
        this.filter.setDateFormat(DATE_FORMAT);
        this.filter.setOrderCriteria(JOBNET);
     }
    
    private Query setQueryParams(String hql) {
        Query query = session.createQuery(hql);


        if (filter.getSchedulerId() != null && !filter.getSchedulerId().equals("")) {
            query.setParameter(SCHEDULER_ID, filter.getSchedulerId());
        }


        if (filter.getNetId() != null ) {
            query.setParameter(NET_ID, filter.getNetId());
        }
        
        if (filter.getJobnet() != null   ) {
            query.setParameter(JOBNET, filter.getJobnet());
        }
/*
        if (filter.getStatus() != null && !filter.getStatus().equals("")) {
            query.setInteger(STATUS, filter.getStatus());
        }

        if (filter.getStatusWaiter() != null && !filter.getStatusWaiter().equals("")) {
            query.setInteger(STATUS_WAITER, filter.getStatusWaiter());
        }

        if (filter.getStatusRunner() != null && !filter.getStatusRunner().equals("")) {
            query.setInteger(STATUS_RUNNER, filter.getStatusRunner());
        }

        if (filter.getStatusDispatcher() != null && !filter.getStatusDispatcher().equals("")) {
            query.setInteger(STATUS_DISPATCHER, filter.getStatusDispatcher());
        }

        if (filter.getIsWaiterSkipped() != null) {
            query.setBoolean(IS_WAITER_SKIPPED, filter.getIsWaiterSkipped());
        }

        if (filter.getIsRunnerOnDemand() != null) {
            query.setBoolean(IS_RUNNER_ON_DEMAND, filter.getIsRunnerOnDemand());
        }
        
        if (filter.getIsRunnerSkipped() != null) {
            query.setBoolean(IS_RUNNER_SKIPPED, filter.getIsRunnerSkipped());
        }

      
        
        if (filter.getBootstrap() != null) {
            query.setBoolean(BOOTSTRAP, filter.getBootstrap());
        }

        if (filter.getIsDispatcherSkipped() != null) {
            query.setBoolean(IS_DISPATCHER_SKIPPED, filter.getIsDispatcherSkipped());
        }
*/
        return query;
    }

    public int delete() {

        String hql = "delete from JobNetDBItem " + getWhere();

        Query query = setQueryParams(hql);
        int row = query.executeUpdate();

        return row;
    }

    private String getWhere() {
        String where = "";
        String and = "";


        if (!filter.getSchedulerId().equals("")) {
            where += and + " schedulerId = :schedulerId";
            and = " and "; 
        }

      
        if (filter.getNetId() != null) {
            where += and + " netId = :netID";
            and = " and ";
        }
        
        if (filter.getJobnet() != null && !filter.getJobnet().equals("")) {
            where += and + " jobnet = :jobnet";
            and = " and ";
        }

/*        if (filter.getStatus() != null) {
            where += and + " status  = :status";
            and = " and ";
        }

        if (filter.getStatusDispatcher() != null) {
            where += and + " statusDispatcher = :statusDispatcher";
            and = " and ";
        }

        if (filter.getStatusRunner() != null) {
            where += and + " statusRunner = :statusRunner";
            and = " and ";
        }

        if (filter.getStatusWaiter() != null) {
            where += and + " statusWaiter = :statusWaiter";
            and = " and ";
        }

        if (filter.getIsWaiterSkipped() != null) {
            where += and + " isWaiterSkipped = :isWaiterSkipped";
            and = " and ";
        }

        if (filter.getIsRunnerSkipped() != null) {
            where += and + " isRunnerSkipped = :isRunnerSkipped";
            and = " and ";
        }


        if (filter.getIsRunnerOnDemand() != null) {
            where += and + " isRunnerOnDemand= :isRunnerOnDemand";
            and = " and ";
        }

        if (filter.getIsDispatcherSkipped() != null) {
            where += and + " isDispatcherSkipped = :isDispatcherSkipped";
            and = " and ";
        }

        
        if (filter.getBootstrap() != null) {
            where += and + " bootstrap = :bootstrap";
            and = " and ";
        }
*/
        if (where.trim().equals("")) {

        } else {
            where = "where " + where;
        }
        return where;

    }

    public List<JobNetDBItem> getJobNetList(int limit) {
        initSession();
     

        Query query = setQueryParams("from JobNetDBItem jobnet " + getWhere() + this.filter.getOrderCriteria() + this.filter.getSortMode());

        if (limit > 0) {
            query.setMaxResults(limit);
        }

        @SuppressWarnings("unchecked")
		List<JobNetDBItem> jobnetPlanList = query.list();
        return jobnetPlanList;

    }

    public JobNetFilter getFilter() {
        return filter;
    }

    public void resetFilter() {
        filter = new JobNetFilter();
    }

    public void setFilter(JobNetFilter filter) {
        this.filter = filter;
    }
	
	 

}
