/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.jobnet.db;

import com.sos.hibernate.layer.SOSHibernateDBLayer;
import com.sos.jobnet.classes.JobNetException;
import org.hibernate.Query;

import java.io.File;
import java.util.List;

/**
 * 
 * \class JobNetEdgesDBLayer \brief JobNetEdgesDBLayer -
 * 
 * \details
 * 
 * \section JobNetEdgesDBLayer.java_intro_sec Introduction
 * 
 * \section JobNetEdgesDBLayer.java_samples Some Samples
 * 
 * \code .... code goes here ... \endcode
 * 
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 13.09.2011 \see reference
 * 
 * Created on 13.09.2011 14:40:18
 */

public class JobNetEdgesDBLayer extends SOSHibernateDBLayer {

    @SuppressWarnings("unused")
    private final String conClassName = "JobNetEdgesDBLayer";
    public final String conSVNVersion = "$Id: JobNetEdgesDBLayer.java 20189 2013-05-17 14:48:44Z ss $";

    private static final String CHILD_NODE_ID = "childNodeId";

    private static final String EDGE_TYPE = "edgeType";

    private static final String PARENT_NODE_ID = "parentNodeId";

    private static final String JOB_CHAIN = "jobChain";

    private static final String NODE = "node";

    private static final String SCHEDULER_ID = "schedulerId";

    private static final String ORDER_CRITERIA = "EDGE_ID";

    private JobNetEdgesFilter filter = null;

    public JobNetEdgesDBLayer(File configurationFile_) {
        super();
        this.setConfigurationFile(configurationFile_);
        this.filter = new JobNetEdgesFilter();
        this.filter.setOrderCriteria(ORDER_CRITERIA);
    }

    private Query setQueryParams(String hql) {
        Query query = session.createQuery(hql);

        if (filter.getSchedulerId() != null && !filter.getSchedulerId().equals("")) {
            query.setParameter(SCHEDULER_ID, filter.getSchedulerId());
        }

        if (filter.getNode() != null && !filter.getNode().equals("")) {
            query.setParameter(NODE, filter.getNode());
        }

        if (filter.getJobChain() != null && !filter.getJobChain().equals("")) {
            query.setParameter(JOB_CHAIN, filter.getJobChain());
        }

        if (filter.getParentNodeId() != null) {
            query.setLong(PARENT_NODE_ID, filter.getParentNodeId());
        }

        if (filter.getChildNodeId() != null) {
            query.setLong(CHILD_NODE_ID, filter.getChildNodeId());
        }

        if (filter.getEdgeType() != null && filter.getEdgeType().getEdgeType() != null && !filter.getEdgeType().getEdgeType().equals("")) {
            query.setParameter(EDGE_TYPE, filter.getEdgeType().getEdgeType());
        }

        return query;

    }

    public int delete() {

        int row = 0;

        if ((filter.getSchedulerId() != null && !filter.getSchedulerId().equals("")) || (filter.getNode() != null && !filter.getNode().equals(""))) {

            Query query = setQueryParams("from JobNetEdgesDBItem edge " + getWhere());
            @SuppressWarnings("unchecked")
			List<JobNetEdgesDBItem> jobnetEdgesList = query.list();
            row = jobnetEdgesList.size();
            for (int i=0;i<row;i++){
                JobNetEdgesDBItem j = jobnetEdgesList.get(i);
                j.getJobnetNodeDBItem().removeJobNetEdge(j);
            }

        } else {
            String hql = "delete from JobNetEdgesDBItem " + getWhere();

            Query query = setQueryParams(hql);
            row = query.executeUpdate();
        }
 
        return row;
    }

    private String getWhere() {
        String where = "";
        String and = "";

        if (filter.getSchedulerId() != null && !filter.getSchedulerId().equals("")) {
            where += and + " edge.jobnetNodeDBItem.schedulerId = :schedulerId";
            and = " and ";
        }

        if (filter.getNode() != null && !filter.getNode().equals("")) {
            where += and + " edge.jobnetNodeDBItem. = :node";
            and = " and ";
        }

        if (filter.getJobChain() != null && !filter.getJobChain().equals("")) {
            where += and + " edge.jobnetNodeDBItem.jobChain = :jobChain";
            and = " and ";
        }

        if (filter.getParentNodeId() != null) {
            where += and + " parentNodeId = :parentNodeId";
            and = " and ";
        }

        if (filter.getChildNodeId() != null) {
            where += and + " childNodeId = :childNodeId";
            and = " and ";
        }

        if (filter.getEdgeType() != null && filter.getEdgeType().getEdgeType() != null && !filter.getEdgeType().getEdgeType().equals("")) {
            where += and + " edgeType = :edgeType";
            and = " and ";
        }

        if (where.trim().equals("")) {

        } else {
            where = "where " + where;
        }
        return where;

    }

    public List<JobNetEdgesDBItem> getJobnetEdgesList(int limit) {
        initSession();

        Query query = setQueryParams("from JobNetEdgesDBItem edge " + getWhere() + this.filter.getOrderCriteria() + this.filter.getSortMode());

        if (limit > 0) {
            query.setMaxResults(limit);
        }

        @SuppressWarnings("unchecked")
		List<JobNetEdgesDBItem> jobnetEdgesList = query.list();
        return jobnetEdgesList;
    }

    public List<JobNetEdgesDBItem>  getSuccessors(JobNetNodeDBItem jobNetNodeDBItem) {

        if (jobNetNodeDBItem == null)
            throw new JobNetException("Parameter in null");

        filter.setEdgeTypeSuccessors();
        filter.setParentNodeId(jobNetNodeDBItem.getNodeId());

        return getJobnetEdgesList(-1);
    }

    public List<JobNetEdgesDBItem> getPredecessors(JobNetNodeDBItem jobNetNodeDBItem) {

        filter.setEdgeTypePredecessors();
        filter.setParentNodeId(jobNetNodeDBItem.getNodeId());

        return getJobnetEdgesList(-1);
    }

    public void addJobNetEdge(JobNetNodeDBItem jobNetNodeDBItem, JobNetEdgesDBItem jobNetEdgesDBItem) {
        jobNetNodeDBItem.addJobNetEdge(jobNetEdgesDBItem);
    }

    public void removeJobNetEdge(JobNetNodeDBItem jobNetNodeDBItem, JobNetEdgesDBItem jobNetEdgesDBItem) {
        jobNetNodeDBItem.removeJobNetEdge(jobNetEdgesDBItem);
    }

    public JobNetEdgesFilter getFilter() {
        return filter;
    }

    public void setFilter(JobNetEdgesFilter filter) {
        this.filter = filter;
    }

}
