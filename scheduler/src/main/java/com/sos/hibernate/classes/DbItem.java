/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.hibernate.classes;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import java.util.TimeZone;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import javax.persistence.Transient;



 
/**
* \class DbItem 
* 
* \brief DbItem - 
* 
* \details
*
* \section DbItem.java_intro_sec Introduction
*
* \section DbItem.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 19.01.2012
* \see reference
*
* Created on 19.01.2012 12:57:02
 */

public class DbItem {

	@SuppressWarnings("unused")
	private final String	conClassName	= "DbItem";
	protected UtcTimeHelper utcTimeHelper;
	
	public DbItem() {
	     utcTimeHelper = new UtcTimeHelper();
		//
	}
	
	public String getLogAsString() throws IOException {
		return "";
	}
	public Long getLogId() {
		return Long.valueOf(-1);
	}
 	public String getTitle() {
 		return "";
	}
 	public boolean isStandalone() {
 		return false;
 	}
 	public String getIdentifier() {
 		return "";
 	}
 	public String getSchedulerId() {
 		return "";
 	}
 	public String getJob() {
 		return "";
 	}
 	public String getJobChain() {
 		return "";
 	}
 	public String getOrderId() {
 		return "";
 	}

 
 	private boolean isToday(Date d) {
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
 		return formatter.format(d).equals(formatter.format(new Date()));
 	}
 	
 	public String getDateFormatted(Date d) {
 	   if (d == null) {
 	       return "";
 	   }
 	   String fromTimeZoneString = "UTC";
 	    
       DateTime dateTimeInUtc = new DateTime(d);
 
       String toTimeZoneString = utcTimeHelper.localTimeZoneString();
      
       if (isToday(utcTimeHelper.convertTimeZonesToDate(fromTimeZoneString, toTimeZoneString, new DateTime(d)))) {
           return utcTimeHelper.convertTimeZonesToString("HH:mm:ss",fromTimeZoneString, toTimeZoneString, dateTimeInUtc);
       }else {
           return utcTimeHelper.convertTimeZonesToString("yyyy-MM-dd H:mm:ss",fromTimeZoneString, toTimeZoneString, dateTimeInUtc);
       }
       
/* 	    
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 		if (d == null) {
 			return "";
 		}else{
 			if (isToday(d)) {
	 		     formatter = new SimpleDateFormat("HH:mm:ss");
 			}else {
	 		     formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 			}
 		    String s = formatter.format(d);
 		    return s;
 		}
*/
 	}
 
 	  protected String null2Blank(String s) {
 	    	if (s==null) {
 	    		return ""; 
 	    	}else {
 	    		return s; 
 	    	}

 	    }

 	
 	public String getDateDiff(Date start,Date end){
 		if (start == null || end == null){
 			return "";
 		}else{
 		 Calendar cal_1 = new GregorianCalendar( );
 		 Calendar cal_2 = new GregorianCalendar();
 		 
 		 if (end==null) {
 		     end = new Date();
 		 }
 		 cal_1.setTime( start );                      
 		 cal_2.setTime( end );                  
 
 		 long time = cal_2.getTime().getTime() - cal_1.getTime().getTime(); 
 		 
 		long millis = time % 1000;
 		time/=1000;
 		long seconds = time % 60;
 		time/=60;
 		long minutes = time % 60;
 		time/=60;
 		long hours = time;
 		 
 		 
 		
 	 	Calendar calendar = GregorianCalendar.getInstance(); 
 		calendar.set(Calendar.HOUR_OF_DAY, (int) hours);  
 		calendar.set(Calendar.MINUTE, (int) minutes);  
 		calendar.set(Calendar.SECOND, (int) seconds);  

 		
	    SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
 		String d = formatter.format(calendar.getTime());

 		return d;
 		}
 	}
 	
 	public boolean haveError() {
 		return false;
 	} 	
 	
  	
 	public String getJobName() {
 		return "";
 	} 	
 	
 	public String getStartTimeFormated() {
 		return "";
 	} 	
 	
 	public String getDurationFormated() {
 		return "";
 	} 	
 	
 	public String getEndTimeFormated() {
 		return "";
 	} 	
 	
 	public String getExecResult() {
 		return "";
 	} 	
 	
 	public String getSpoolerId() {
 		return "";
 	} 	
 	
 	public Date getEndTime() {
 		return null;
 	}
 	
 	public String getState() {
 		return "";
 	} 	
 	
 	public String getJobOrJobchain() {
 		return "";
 	} 		
 
    public boolean isOrderJob(){
        return false;
    }       
      
    public boolean isJobNetNode(){
        return false;
    }       
          
 	
       
 	 	
}
