/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.i18n;
import java.util.Locale;

import org.apache.log4j.Logger;

/**
* \class I18NBase 
* 
* \brief I18NBase - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: I18NBase.java 16694 2012-03-04 20:41:57Z oh $10.01.2011
* \see reference
*
* Created on 10.01.2011 19:14:11
 */
/**
 * @author KB
 *
 */
public class I18NBase extends com.sos.JSHelper.Basics.JSToolBox {
	@SuppressWarnings("unused")
	private final String		conClassName		= "I18NBase";
	@SuppressWarnings("unused")
	private final String		conSVNVersion		= "$Id: I18NBase.java 16694 2012-03-04 20:41:57Z oh $";
	private static final Logger	logger				= Logger.getLogger(I18NBase.class);
	/*!
	 * \var OUTPUT_CHARSET_NAME
	 * \brief We use ISO-8859-1, rather than the JVM's default encoding, as the encoding when writing the resource bundle
	 * properties files, since ISO-8859-1 is the encoding Java uses to read resource bundle properties files unless you
	 * jump through some major hoops, which we currently do not jump through in
	 * {@link com.sos.i18n.Msg#getResourceBundle()}.
	 * <p/>
	 * Note, for compatibility with older Java runtimes, we use the "historical Java name" for the encoding -
	 * "ISO8859_1".
	 */
	private static final String	OUTPUT_CHARSET_NAME	= "ISO-8859-1";
	/*!
	 * \var BUNDLE_BASE_NAME
	 * \brief This is the base name of this task's own I18N message bundle.
	 */
	static Msg.BundleBaseName	BUNDLE_BASE_NAME;
	private String				strLocale			= Locale.getDefault().toString();
	private Locale				objLocale			= Locale.getDefault();

	protected I18NBase() {
	}

	protected I18NBase(String strBundleBaseName) {
		super(strBundleBaseName);
		BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName);
	}

	protected I18NBase(String strBundleBaseName, final String pstrLocale) {
		super(strBundleBaseName);
		BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName, pstrLocale);
		strLocale = pstrLocale;
		objLocale = new Locale(strLocale);
	}

	/**
	 * Gets an I18N message from this task's own resource bundle.
	 *
	 * @param  key     the bundle key that is associated with the message to log
	 * @param  varargs values to replace the message's placeholders with
	 *
	 * @return the message in the VM's default locale
	 */
	protected String getMsg(String key, Object... varargs) {
		if(BUNDLE_BASE_NAME != null) {
			String strBundleBaseName = BUNDLE_BASE_NAME.getBundleBaseName();
			BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName, strLocale);
		}
		return Msg.createMsg(BUNDLE_BASE_NAME, objLocale, key, varargs).toString();
		// return Msg.createMsg(BUNDLE_BASE_NAME, key, varargs).toString();
	}

	public void setLocale(final String pstrLocale) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setLocale";
//		logger.debug("set locale to " + pstrLocale);
		if (pstrLocale != null && pstrLocale.trim().length() > 0) {
			strLocale = pstrLocale;
			objLocale = new Locale(pstrLocale);
		}
	} // private void setLocale
}
