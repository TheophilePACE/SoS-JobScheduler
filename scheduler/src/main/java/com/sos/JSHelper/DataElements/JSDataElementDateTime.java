/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.DataElements;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
* \class JSDataElementDateTime
*
* \brief JSDataElementDateTime -
*
* \details
*
* \section JSDataElementDateTime.java_intro_sec Introduction
*
* \section JSDataElementDateTime.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author eqbfd
* @version $Id: JSDataElementDateTime.java 14731 2011-07-05 20:50:42Z sos $11.02.2009
* \see reference
*
* Created on 11.02.2009 16:03:19
 */

/**
 * @author eqbfd
 *
 */
public class JSDataElementDateTime extends JSDataElement {

	private final String		conClassName			= "JSDataElementDateTime";

	protected Date				dteDateTime				= new Date();

	public static final String	SIMPLE_DATE_FORMAT		= "yyyy-MM-dd";
	public static final String	FULL_DATETIME_FORMAT	= "yyyy-MM-dd HH:mm:ss";
	private String				strDateFormat			= "yyyy.MM.dd HH:mm:ss";

	private String				strTimestamp			= null;					// "yyyy.MM.dd hh:mm:ss"

	// private int intYearPos = 0;
	// private int intMonthPos = 5;
	// private final int intDayPos = 8;
	// private final int intHoursPos = 11;
	// private final int intMinutePos = 14;
	// private final int intSecondsPos = 17;

	private SimpleDateFormat	dateFormatter			= null;

	public JSDataElementDateTime() {
		//
	}

	public JSDataElementDateTime(final Date pdteDateTime) {
		dteDateTime = pdteDateTime;
	}

	/**
	 * \brief JSDataElementDateTime
	 *
	 * \details
	 *
	 * @param pPstrValue
	 */
	public JSDataElementDateTime(final String pstrValue) {
		super(pstrValue);

		String2Date(pstrValue);
		// dateFormatter = new SimpleDateFormat(strDateFormat);
		// strTimestamp = dateFormatter.format(pobjTimestamp);
		// SignalDebug("JSTimestamp(java.sql.Timestamp), timestamp=" + strTimestamp, JSListenerClass.DEBUG_LEVEL9);

	}

	/**
	 *
	 * \brief String2Date
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @param pstrDateTime
	 */
	private void String2Date(final String pstrDateTime) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::String2Date";

		DateFormat objDF = DateFormat.getDateTimeInstance();
		try {
			dteDateTime = objDF.parse(pstrDateTime);

		} // try
		catch (Exception objException) {
			super.Value("");
			dteDateTime = null;
		}
		finally {
			//
		} // finally

	} // private void String2Date

	/**
	 * \brief JSDataElementDateTime
	 *
	 * \details
	 *
	 * @param pPstrValue
	 * @param pPstrDescription
	 */
	public JSDataElementDateTime(final String pPstrValue, final String pPstrDescription) {
		super(pPstrValue, pPstrDescription);
		// TODO Auto-generated constructor stub
	}

	/**
	 *
	 * \brief doInit
	 *
	 * \details

	 * \return void
	 *
	 */
	@Override
	public void doInit() {
		// super.doInit();
		super.FormatString(strDateFormat);
		super.Description("DateAndTime");
		super.ColumnHeader("DateTime");
		super.XMLTagName("DateTime");
	}

	/**
	 *
	 * \brief Value
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pstrDateTime
	 */
	@Override
	public void Value(final String pstrDateTime) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Value";

		String2Date(pstrDateTime);
		super.Value(pstrDateTime);

	} // public void Value}

	public void Value(final Date pdteDateTime) {
		dteDateTime = pdteDateTime;
		super.Value(this.FormattedValue());
	}

	public Date value() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::value";

		return dteDateTime;
	} // public Date value}

	/**
	 *
	 * \brief FormattedValue - Liefert den Wert des Elements formatiert
	 *
	 * \details
	 * das Format (die Edit-Maske) wird über die Eigenschaft FormatString
	 * definiert.
	 *
	 * Wenn kein Format-String definiert ist, so wird der Wert als String
	 * zurückgegeben.
	 *
	 * \return String
	 *
	 * @return
	 */
	@Override
	public String FormattedValue() {

		if (dteDateTime == null) {
			strTimestamp = "";
		}
		else {
			if (isEmpty(this.FormatString())) {
				this.FormatString(FULL_DATETIME_FORMAT);
			}

			dateFormatter = new SimpleDateFormat(this.FormatString());
			strTimestamp = dateFormatter.format(dteDateTime);
		}
		return strTimestamp;
	}

	/**
	 *
	 * \brief ActualDateTime
	 *
	 * \details
	 *
	 * \return Date
	 *
	 * @return
	 */
	public Date ActualDateTime() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::ActualDateTime";

		Calendar now = Calendar.getInstance();
		return now.getTime();

	} // public Date ActualDateTime}
}
