/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class SOSOptionFileAge 
* 
* \brief SOSOptionFileAge - 
* 
* \details
* 
* \section SOSOptionFileAge.java_intro_sec Introduction
*
* \section SOSOptionFileAge.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*  
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: SOSOptionFileAge.java 15255 2011-10-06 12:48:41Z oh $28.08.2010
* \see reference
*
* Created on 28.08.2010 22:37:59
 */

/**
 * @author KB
 *
 */
public class SOSOptionFileAge extends SOSOptionString {

	private static final String	conRegExpDigits		= "[\\d]+";
	/**
	 * 
	 */
	private static final long	serialVersionUID	= -5758606786206972123L;
	@SuppressWarnings("unused")
	private final String		conClassName		= "SOSOptionFileAge";

	/**
	 * \brief SOSOptionFileAge
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 */
	public SOSOptionFileAge(JSOptionsClass pPobjParent, String pPstrKey, String pPstrDescription, String pPstrValue, String pPstrDefaultValue,
			boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
	}

	/**
	 * @param fileage   sec or hours:min[:sec]
	 * @return long value
	 * @throws JobSchedulerException
	 */
	private long calculateFileAge() {

		long age = 0;

		long lngNoOfDays = 0;
		long lngNoOfHours = 0;
		long lngNoOfMinutes = 0;
		long lngNoOfSeconds = 0;
		String strFileAge = this.strValue;
		String strM = String.format("'%1$s' is not a valid string for a file-age value", strFileAge);

		if (strFileAge == null || strFileAge.trim().length() == 0)
			return 0;

		if (strFileAge.indexOf(" ") > 0) {
			String[] strA = strFileAge.split(" ");
			long lngV = Long.parseLong(strA[0]);
			String strUoM = strA[1].toLowerCase();
			if (strUoM.startsWith("day")) {
				lngNoOfDays = lngV;
			}
			else {
				if (strUoM.startsWith("week")) {
					lngNoOfDays = lngV * 7;
				}
				else {
					if (strUoM.startsWith("month")) {
						lngNoOfDays = lngV * 30;
					}
					else {
						if (strUoM.startsWith("hour")) {
							lngNoOfHours = lngV;
						}
						else {
							if (strUoM.startsWith("minute")) {
								lngNoOfMinutes = lngV;
							}
							else {
								if (strUoM.startsWith("second")) {
									lngNoOfSeconds = lngV;
								}
							}
						}
					}
				}
			}
		}
		else { // sec ?
			if (strFileAge.indexOf(":") == -1) {
				if (!strFileAge.matches(conRegExpDigits)) {
					throw new JobSchedulerException(strM);
				}
				else {
					lngNoOfSeconds = Long.parseLong(strFileAge);
				}
			}
			else { // hours:min[:sec]
				if (!strFileAge.matches("^[\\d].*[\\d]$")) {
					throw new JobSchedulerException(strM);
				}

				String[] timeArray = strFileAge.split(":");

				if (timeArray.length > 3) {
					throw new JobSchedulerException(strM);
				}

				for (int i = 0; i < timeArray.length; i++) {
					if (!timeArray[i].matches(conRegExpDigits)) {
						throw new JobSchedulerException(strM);
					}
				}

				lngNoOfHours = Long.parseLong(timeArray[0]);
				lngNoOfMinutes = Long.parseLong(timeArray[1]);
				lngNoOfSeconds = 0;

				if (timeArray.length > 2) {
					lngNoOfSeconds = Long.parseLong(timeArray[2]);
				}
			}
		}

		age = (lngNoOfDays * 3600 * 24) + (lngNoOfHours * 3600) + (lngNoOfMinutes * 60) + (lngNoOfSeconds);

		return age;
	}

	public long getAgeAsMS() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getAgeAsMS";

		return calculateFileAge() * 1000;

	} // private long getAgeAsMS

	public long getAgeAsSeconds() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getAgeAsMS";

		return calculateFileAge();

	} // private long getAgeAsSeconds

}
