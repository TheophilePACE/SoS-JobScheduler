/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;
import java.util.HashMap;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSOptionRelOp 
* 
* \brief SOSOptionRelOp - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 20.08.2011 12:28:50
 */
@I18NResourceBundle(baseName = "com_sos_JSHelper_Messages", defaultLocale = "en")
public class SOSOptionRelOp extends SOSOptionString {

	private static final long				serialVersionUID	= 1935027172360607987L;
	private static HashMap<String, Integer>	objRelOp			= null;
	private final String					conClassName		= "SOSOptionRelOp";
	@SuppressWarnings("unused")
	private static final String				conSVNVersion		= "$Id$";
	@SuppressWarnings("unused")
	private static final Logger				logger				= Logger.getLogger(SOSOptionRelOp.class);

	private static final String				JSH_T_0010			= "JSH_T_0010";							// "greater or equal";
	private static final String				JSJ_E_0017			= "JSJ_E_0017";							// "Compare-operator unknown: '%1$s'";

	public SOSOptionRelOp(JSOptionsClass pPobjParent, String pPstrKey, String pPstrDescription, String pPstrValue, String pPstrDefaultValue,
			boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		setRelOpTab();
	}

	private void setRelOpTab() {
		this.setMessageResource("com_sos_JSHelper_Messages");
		if (objRelOp == null) {
			objRelOp = new HashMap<String, Integer>();
		}
		objRelOp.put("eq", 1);
		objRelOp.put("equal", 1);
		objRelOp.put("==", 1);
		objRelOp.put("=", 1);
		objRelOp.put("ne", 2);
		objRelOp.put("not equal", 2);
		objRelOp.put("!=", 2);
		objRelOp.put("<>", 2);
		objRelOp.put("lt", 3);
		objRelOp.put("less than", 3);
		objRelOp.put("<", 3);
		objRelOp.put("le", 4);
		objRelOp.put("less or equal", 4);
		objRelOp.put("<=", 4);
		objRelOp.put("ge", 5);
		objRelOp.put(Messages.getMsg(JSH_T_0010), 5);
		objRelOp.put(">=", 5);
		objRelOp.put("gt", 6);
		objRelOp.put("greater than", 6);
		objRelOp.put(">", 6);
	}

	@Override
	public void Value(final String pstrValue) {
		if (objRelOp == null) {
			setRelOpTab();
		}
		if (pstrValue.trim().length() <= 0) {
			strValue = pstrValue;
		}
		else {
			Integer iOp = objRelOp.get(pstrValue.toLowerCase());
			if (isNotNull(iOp)) {
				this.strValue = pstrValue;
			}
			else {
				throw new JobSchedulerException(Messages.getMsg(JSJ_E_0017, pstrValue));
			}
		}
	}

	public boolean compareIntValues(int pintValue1, int pintValue2) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::compareIntValues";

		boolean flgR = false;
		String strT1 = strValue;
		Integer iOp = objRelOp.get(strT1.toLowerCase());
		if (isNotNull(iOp)) {
			switch (iOp) {
				case 1:
					flgR = pintValue1 == pintValue2;
					break;

				case 2:
					flgR = pintValue1 != pintValue2;
					break;

				case 3:
					flgR = pintValue1 < pintValue2;
					break;

				case 4:
					flgR = pintValue1 <= pintValue2;
					break;

				case 5:
					flgR = pintValue1 >= pintValue2;
					break;

				case 6:
					flgR = pintValue1 > pintValue2;
					break;

				default:
					break;
			}
		}
		else {
			throw new JobSchedulerException(Messages.getMsg(JSJ_E_0017, strValue));
		}

		return flgR;
	}// private boolean compareIntValues

}
