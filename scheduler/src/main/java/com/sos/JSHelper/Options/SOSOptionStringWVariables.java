/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class JSOptionFileName
*
* \brief JSOptionFileName -
*
* \details
*
* \section JSOptionFileName.java_intro_sec Introduction
*
* \section JSOptionFileName.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author eqbfd
* @version $Id: SOSOptionFileName.java 18717 2013-01-02 21:34:03Z kb $23.01.2009
* \see reference
*
* Created on 23.01.2009 16:58:58
 */

/**
 * @author eqbfd
 *
 */
public class SOSOptionStringWVariables extends SOSOptionElement {

	private static final long	serialVersionUID	= 3890065543134955852L;
	private final String		conClassName		= "SOSOptionFileName";
	private String				strOriginalValue	= "";

	/**
	 * \brief SOSOptionStringWVariables
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 * @throws Exception
	 */
	public SOSOptionStringWVariables(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		intOptionType = isOptionTypeString;
	}

	public final String substituteAllDate() throws Exception {

		// TODO substituteAllDate in JSFile abhandeln
		//		String targetFileName = new File(strValue).getPath();  // nicht verwenden:
		//  hier werden die "/" brutal in "\" umgebogen bei JADE
		String temp = strValue;
		if (strValue.indexOf("[") > -1) {
			String targetFileName = strValue;
			temp = substituteDateMask(targetFileName);

			while (!targetFileName.equals(temp)) {
				targetFileName = temp;
				temp = substituteDateMask(targetFileName);
			}
		}
		else {
		}

		return temp;
	}

	private String substituteDateMask(String targetFilename) throws Exception {

		final String conVarName = "[date:";
		try {
			// check for a date format string given in the file mask
			if (targetFilename.matches("(.*)(\\" + conVarName + ")([^\\]]*)(\\])(.*)")) {
				int posBegin = targetFilename.indexOf(conVarName);
				if (posBegin > -1) {
					int posEnd = targetFilename.indexOf("]", posBegin + 6);
					if (posEnd > -1) {
						String strDateMask = targetFilename.substring(posBegin + 6, posEnd);
						if (strDateMask.length() <= 0) {
							strDateMask = SOSOptionTime.dateTimeFormat;
						}
						String strDateTime = SOSOptionTime.getCurrentTimeAsString(strDateMask);
						String strT = (posBegin > 0 ? targetFilename.substring(0, posBegin) : "") + strDateTime;
						if (targetFilename.length() > posEnd) {
							strT += targetFilename.substring(posEnd + 1);
						}
						targetFilename = strT;
					}
				}
			}

			return targetFilename;

		}
		catch (Exception e) {
			throw new JobSchedulerException("error substituting [date:]: " + e.getMessage(), e);
		}
	}

	public String OriginalValue ( ) {
		return strOriginalValue;
	}

	public void doReSubstitution () {

		try {
			String strT = substituteAllDate();
			super.Value(strT);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void Value(final String pstrStringValue) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Value";

		strOriginalValue = pstrStringValue;
		super.Value(pstrStringValue);
		try {
			String strT = substituteAllDate();
			super.Value(strT);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	} // public void Value
}
