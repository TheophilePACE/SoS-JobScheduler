/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;

import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class SOSOptionTimeHorizon 
* 
* \brief SOSOptionTimeHorizon - 
* 
* \details
*
* \section SOSOptionTimeHorizon.java_intro_sec Introduction
*
* \section SOSOptionTimeHorizon.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id: SOSOptionTimeHorizon.java 17050 2012-05-04 11:17:43Z ss $
* \see reference
*
* Created on 09.03.2011 01:23:07
 */
/**
 * @author oh
 *
 */
public class SOSOptionTimeHorizon extends SOSOptionString {
	/**
	 * 
	 */
	private static final long	serialVersionUID	= -5511394144386870461L;
	/**
	 * 
	 */
	@SuppressWarnings("unused")
	private final String		conClassName	= "SOSOptionTimeHorizon";
	
	private final static String isoPattern = "(\\d{4})-(\\d{1,2})-(\\d{1,2})(?:[ T](\\d{1,2}):(\\d{1,2})(?::(\\d{1,2}))?)?";
	private final static String periodPattern = "([+-]?\\d+)(?::(\\d{1,2}):(\\d{1,2})(?::(\\d{1,2}))?)?";

	
	/**
	 * \brief SOSOptionTimeHorizon
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 */
	public SOSOptionTimeHorizon(JSOptionsClass pPobjParent, String pPstrKey, String pPstrDescription, String pPstrValue, String pPstrDefaultValue,
		boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
	}
	
	public Date getDateObject() {
		Calendar objCal = Calendar.getInstance();
		Matcher objIsoDateMatcher = Pattern.compile(isoPattern).matcher(strValue);
		Matcher objPeriodMatcher = Pattern.compile(periodPattern).matcher(strValue);
		int seconds	= 0;
		if (objIsoDateMatcher.find()) {
			objCal.set(Integer.parseInt(objIsoDateMatcher.group(1)), Integer.parseInt(objIsoDateMatcher.group(2))-1, Integer.parseInt(objIsoDateMatcher.group(3)));
			if(isNotEmpty(objIsoDateMatcher.group(4))) {
				objCal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(objIsoDateMatcher.group(4)));
				objCal.set(Calendar.MINUTE, Integer.parseInt(objIsoDateMatcher.group(5)));
				if(isNotEmpty(objIsoDateMatcher.group(6))) {
					seconds = Integer.parseInt(objIsoDateMatcher.group(6));
				}
				objCal.set(Calendar.SECOND, seconds);
				objCal.set(Calendar.MILLISECOND, 0);
			}
		}
		else if(objPeriodMatcher.find()) {
			objCal.setTimeInMillis(System.currentTimeMillis()+(Long.parseLong(objPeriodMatcher.group(1).replace("+", ""))*24*60*60*1000));
			if(isNotEmpty(objPeriodMatcher.group(2))) {
				objCal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(objPeriodMatcher.group(2)));
				objCal.set(Calendar.MINUTE, Integer.parseInt(objPeriodMatcher.group(3)));
				if(isNotEmpty(objPeriodMatcher.group(4))) {
					seconds = Integer.parseInt(objPeriodMatcher.group(4));
				}
				objCal.set(Calendar.SECOND, seconds);
				objCal.set(Calendar.MILLISECOND, 0);
			}
		}
		else {
			throw new JobSchedulerException(String.format("%1$s must be in the format yyyy-MM-dd[ HH:mm[:ss]] or <+/-number of days from now>[:HH:mm[:ss]]", strValue));
		}
		return objCal.getTime();
	} // public Date getDate
	
	public Date getEndFromNow() {
		Calendar result = Calendar.getInstance();
		Matcher objPeriodMatcher = Pattern.compile(periodPattern).matcher(strValue);
		int seconds	= 0;
		if (objPeriodMatcher.find()) {
			if(isNotEmpty(objPeriodMatcher.group(1))) 
				result.add(Calendar.DAY_OF_YEAR, Integer.parseInt(objPeriodMatcher.group(1).replace("+", "")) );
			if(isNotEmpty(objPeriodMatcher.group(2))) {
				result.add(Calendar.HOUR, Integer.parseInt(objPeriodMatcher.group(2)));
				result.add(Calendar.MINUTE, Integer.parseInt(objPeriodMatcher.group(3)));
				if(isNotEmpty(objPeriodMatcher.group(4))) {
					seconds = Integer.parseInt(objPeriodMatcher.group(4));
				}
				result.add(Calendar.SECOND, seconds);
			}
		} else {
			throw new JobSchedulerException(String.format("%1$s must be in the format <+/-number of days from now>[:HH:mm[:ss]]", strValue));
		}
		return result.getTime();
	}

}
