/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;

import java.util.Vector;

import sos.util.SOSCommandline;

/**
* \class SOSOptionPassword 
* 
* \brief SOSOptionPassword - 
* 
* \details
*
* \section SOSOptionPassword.java_intro_sec Introduction
*
* \section SOSOptionPassword.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: SOSOptionPassword.java 14829 2011-07-15 17:38:31Z kb $16.05.2010
* \see reference
*
* Created on 16.05.2010 19:50:51
 */

public class SOSOptionPassword extends SOSOptionString {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1374430778591063177L;
	private final String		conClassName		= "SOSOptionPassword";
	public static final String	conBackTic			= "`";
	private String				strCachedPW			= "";

	// SOSOptionPassword() {
	// //
	// }

	public SOSOptionPassword(JSOptionsClass pPobjParent, String pPstrKey, String pPstrDescription, String pPstrValue, String pPstrDefaultValue,
			boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		this.setHideValue(true); 
	}

	/**
	 * 
	 * \brief toString
	 * 
	 * \details
	 * returns in any case stars as value of the password, independently what the real value of the password is.
	 * \return 
	 *
	 * @return
	 */
	@Override
	public String toString() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::toString";

//		String strPValue = "*****";
//		if (ExecuteCommandToGetPassword()) {
//			strPValue = strValue;
//		}
//
//		return this.Description() + ": " + strPValue;

		return super.toString();
		
	} // private String toString

	/**
	 * Checks if an external command needs to be executed to get the password
	 */
	@Override
	public String Value() {

		String strReturnPassword = this.strValue;
		if (strValue != null) {
			try {
				if (ExecuteCommandToGetPassword()) {
					if (strCachedPW.length() <= 0) {
						String command = strValue.substring(1, strValue.length() - 1);

						Vector returnValues = SOSCommandline.execute(command);
						logger.debug(returnValues);
						Integer exitValue = (Integer) returnValues.elementAt(0);
//						Integer exitValue = Integer.getInteger(strT);
						if (exitValue.compareTo(new Integer(0)) == 0) {
							if (returnValues.elementAt(1) != null) {
								strReturnPassword = (String) returnValues.elementAt(1);
								strCachedPW = strReturnPassword;
							}
						}
					}
					else {
						strReturnPassword = strCachedPW;
					}
				}
			}
			catch (Exception e) {
				e.printStackTrace(System.err);
			}
		}
		return strReturnPassword;
	}

	public boolean ExecuteCommandToGetPassword() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::PasswordByExecution";

		boolean flgExecuteCommandToGetPassword = false;

		if (strValue.startsWith(conBackTic) && strValue.endsWith(conBackTic)) {
			flgExecuteCommandToGetPassword = true;
		}

		return flgExecuteCommandToGetPassword;
	} // private boolean PasswordByExecution

}
