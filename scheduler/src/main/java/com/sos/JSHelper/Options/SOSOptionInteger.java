/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.JSHelper.Options;

import java.util.HashMap;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class JSOptionInteger
*
* \brief JSOptionInteger -
*
* \details
*
* \section JSOptionInteger.java_intro_sec Introduction
*
* \section JSOptionInteger.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author eqbfd
* @version $Id: SOSOptionInteger.java 18490 2012-11-27 21:03:23Z kb $23.01.2009
* \see reference
*
* Created on 23.01.2009 16:01:32
 */

/**
 * @author eqbfd
 *
 */
public class SOSOptionInteger extends SOSOptionElement {

	private static final long	serialVersionUID	= -7044542882191150064L;
	public final String			ControlType			= "inttext";

	@SuppressWarnings("unused")
	private final String		conClassName		= "JSOptionInteger";
	protected int intValue = 0;
	/**
	 * \brief JSOptionInteger
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 * @throws Exception
	 */
	public SOSOptionInteger(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);

		intOptionType = isOptionTypeInteger;
	}

	public void value(final int pintval) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::value";

		try {
			intValue = pintval;
			this.Value(new Integer(pintval).toString());
		}
		catch (final Exception e) {
		}

	} // public void value

	public void value(final long pintVal) {

		this.value((int) pintVal);

	} // public void value

	public int value() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::value";

		if (strValue.trim().length() <= 0) {
			return 0;
		}
		return new Integer(strValue);
	} // public int value

	public boolean compare(final String pstrComparator, final int pintValue1) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::compareIntValues";

		HashMap<String, Integer> objRelOp = new HashMap<String, Integer>();

		objRelOp.put("eq", 1);
		objRelOp.put("equal", 1);
		objRelOp.put("==", 1);
		objRelOp.put("=", 1);
		objRelOp.put("ne", 2);
		objRelOp.put("not equal", 2);
		objRelOp.put("!=", 2);
		objRelOp.put("<>", 2);
		objRelOp.put("lt", 3);
		objRelOp.put("less than", 3);
		objRelOp.put("<", 3);
		objRelOp.put("le", 4);
		objRelOp.put("less or equal", 4);
		objRelOp.put("<=", 4);
		objRelOp.put("ge", 5);
		//		objRelOp.put(Messages.getMsg(JSJ_T_0010), 5);
		objRelOp.put("greater or equal", 5);
		objRelOp.put(">=", 5);
		objRelOp.put("gt", 6);
		objRelOp.put("greater than", 6);
		objRelOp.put(">", 6);

		int intThisValue = this.value();
		boolean flgR = false;
		String strT1 = pstrComparator;
		Integer iOp = objRelOp.get(strT1.toLowerCase());
		if (isNotNull(iOp)) {
			switch (iOp) {
				case 1:
					flgR = pintValue1 == intThisValue;
					break;

				case 2:
					flgR = pintValue1 != intThisValue;
					break;

				case 3:
					flgR = pintValue1 < intThisValue;
					break;

				case 4:
					flgR = pintValue1 <= intThisValue;
					break;

				case 5:
					flgR = pintValue1 >= intThisValue;
					break;

				case 6:
					flgR = pintValue1 > intThisValue;
					break;

				default:
					break;
			}
		}
		else {
			//			throw new JobSchedulerException(Messages.getMsg(JSJ_E_0017, pstrComparator));
			throw new JobSchedulerException(String.format("Compare operator unknown: '%1$s'", pstrComparator));
		}

		return flgR;
	}// private boolean compareIntValues

}
