/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.VirtualFileSystem.common;

import org.apache.log4j.Logger;

import com.sos.VirtualFileSystem.FTP.SOSFTPOptions;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSVfsBaseClass
*
* \brief SOSVfsBaseClass -
*
* \details
*
* \section SOSVfsBaseClass.java_intro_sec Introduction
*
* \section SOSVfsBaseClass.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id: SOSVfsBaseClass.java 19706 2013-03-25 10:04:52Z kb $
* \see reference
*
* Created on 22.06.2011 16:18:51
 */

/**
 * @author KB
 *
 */
@I18NResourceBundle(baseName = "SOSVirtualFileSystem", defaultLocale = "en")
public class SOSVfsBaseClass extends SOSVfsMessageCodes {

	private final String	conClassName	= "SOSVfsBaseClass";
	@SuppressWarnings("unused")
	private final Logger	logger			= Logger.getLogger(SOSVfsBaseClass.class);

	public static enum enuSourceOrTarget {
		isUndefined, isSource, isTarget
	};

	private enuSourceOrTarget	intSourceOrTarget	= enuSourceOrTarget.isUndefined;	// source

	protected SOSFTPOptions		objOptions			= null;

	public SOSVfsBaseClass() {
		super("SOSVirtualFileSystem" /* SOSVfsConstants.strBundleBaseName */);
	}

	final public enuSourceOrTarget SourceOrTarget() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::SourceOrTarget";

		return intSourceOrTarget;
	} // private int SourceOrTarget

	public void setSource() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setSource";

		intSourceOrTarget = enuSourceOrTarget.isSource;

	} // private void setSource

	public void setTarget() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setTarget";

		intSourceOrTarget = enuSourceOrTarget.isTarget;

	} // private void setTarget

	public boolean isTarget() {
		if (intSourceOrTarget == enuSourceOrTarget.isTarget) {
			return true;
		}
		return false;
	}

	public boolean isSource() {
		if (intSourceOrTarget == enuSourceOrTarget.isSource) {
			return true;
		}
		return false;
	}

	final public SOSFTPOptions Options() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Options";

		return objOptions;

	} // private SOSFTPOptions Options

	public void Options(final SOSFTPOptions pobjOptions) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Options";

		objOptions = pobjOptions;

	} // private void Options

}
