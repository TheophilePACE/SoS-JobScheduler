/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.VirtualFileSystem.Interfaces;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;

/**
* \class ISOSVirtualFile
*
* \brief ISOSVirtualFile -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: ISOSVirtualFile.java 18564 2012-11-29 20:16:33Z kb $21.05.2010
* \see reference
*
* Created on 21.05.2010 11:01:32
 */

/**
 * @author KB
 *
 */
public interface ISOSVirtualFile {

//	public ISOSVirtualFile (final String pstrFileName);
	/**
	 *
	 * \brief deleteFile
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @param pstrCommandFile
	 * @throws Exception
	 */
	public void deleteFile() throws Exception;

	/**
	 *
	 * \brief putFile
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @param pfleCommandFile
	 * @throws Exception
	 */
	public void putFile(final File fleFile) throws Exception;
	public void putFile(final ISOSVirtualFile pobjVirtualFile) throws Exception;

	/**
	 *
	 * \brief putFile
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @param strFileName
	 * @throws Exception
	 */
	public void putFile(final String strFileName) throws Exception;

	/**
	 *
	 * \brief getFile
	 *
	 * \details
	 *
	 * \return ISOSVirtualFile
	 *
	 * @param pstrFileName
	 * @return
	 * @throws Exception
	 */
	public ISOSVirtualFile getFile() throws Exception;

	/**
	 *
	 * \brief getFileSize
	 *
	 * \details
	 *
	 * \return long
	 *
	 * @param pstrFileName
	 * @return
	 * @throws Exception
	 */
	public long getFileSize() ;

	/**
	 *
	 * \brief getFilePermissions
	 *
	 * \details
	 *
	 * \return Integer
	 *
	 * @param pstrFileName
	 * @return
	 * @throws Exception
	 *
	 *
	 */
	//TODO create Class 'SOSFilePermissions' for FilePermissions.
	public Integer getFilePermissions() throws Exception;

	public String getModificationTime() ;

	public void setFilePermissions(final Integer pintNewPermission) throws Exception;

	public boolean FileExists() throws Exception;

	public boolean isDirectory() throws Exception;

	public boolean notExists () ;

	public boolean isEmptyFile ();

	public OutputStream getFileOutputStream ();

	public OutputStream getFileAppendStream ();

	public void setModeAppend (final boolean pflgModeAppend);
	public void setModeRestart (final boolean pflgModeRestart);
	public void setModeOverwrite  (final boolean pflgModeOverwrite);

	public InputStream getFileInputStream ();

	public boolean delete() ;

	public void rename(final String pstrNewFileName) ;

	public String getParentVfs() ;

	public ISOSVirtualFile getParentVfsFile () ;

	public ISOSVfsFileTransfer getHandler () ;

	public void setHandler (final ISOSVfsFileTransfer pobjVFSHandler);

	public String getName () ;

	/**
	 *
	 * \brief MakeZIPFile - Compress File
	 *
	 * \details
	 * This Method creates a Zip-File for a Single file.
	 * If the data-source is not able to create zip-files the method does nothing.
	 *
	 * It depends on the transfer-environment, wether function is available or not.
	 * On some platforms (e.g. ftp or sftp) this function makes no sense, therefore the
	 * method will return the unchanged filename.
	 *
	 * \return String - the name and path of the ZIP file or the unchanged filename
	 *
	 * @param pstrZipFileNameExtension
	 */
	public String MakeZIPFile(final String pstrZipFileNameExtension) ;

	/**
	 *
	 * \brief write - Writes len bytes from the specified byte array
	 *
	 * \details
	 * Writes len bytes from the specified byte array starting at offset off to this file.
	 * \return void
	 *
	 * @param bteBuffer
	 * @param intOffset
	 * @param intLength
	 */
	public void write (byte[] bteBuffer, int intOffset, int intLength );
	public void write (byte[] bteBuffer);
	public int read (byte[] bteBuffer) ;
	public int read (byte[] bteBuffer, int intOffset, int intLength );
	public void close () ;
	/**
	 *
	 * \brief flush - Flushes this file buffer
	 *
	 * \details
	 * Flushes this file buffer and forces any buffered output bytes to be written out.
	 * \return void
	 *
	 */
	public void flush () ;

	/**
	 *
	 * \brief closeInput
	 *
	 * \details
	 *
	 * \return void
	 *
	 */
	public void closeInput () ;

	/**
	 *
	 * \brief closeOutput
	 *
	 * \details
	 *
	 * \return void
	 *
	 */
	public void closeOutput () ;

	public String File2String ();
	public void String2File (final String pstrContent);

	public long getModificationDateTime() ;
	public long setModificationDateTime(long pdteDateTime);

}
