/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.scheduler.history;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;

import com.sos.hibernate.interfaces.ISOSHibernateDataProvider;

import com.sos.scheduler.history.classes.SchedulerHistoryTableItem;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBLayer;

/**
* \class SchedulerHistoryDataProvider 
* 
* \brief SchedulerHistoryDataProvider - 
* 
* \details
*
* \section SchedulerHistoryDataProvider Introduction
*
* \section SchedulerHistoryDataProvider.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 19.01.2012
* \see reference
*
* Created on 19.01.2012 09:31:01
 */

public class SchedulerTaskHistoryDataProvider implements ISOSHibernateDataProvider {

	@SuppressWarnings("unused")
	private final String						conClassName						= "SchedulerHistoryDataProvider";

    private List<SchedulerTaskHistoryDBItem>    listOfSchedulerTaskHistoryDBItems   = null;
//    private List<SchedulerTaskHistoryDBItem>    listOfSchedulerTaskHistoryDBSchedulersItems   = null;
	private SchedulerTaskHistoryDBLayer			schedulerTaskHistoryDBLayer			= null;
	private static Logger						logger								= Logger.getLogger(SchedulerTaskHistoryDataProvider.class);
   
	
    
    public SchedulerTaskHistoryDataProvider(File configurationFile) {
		this.schedulerTaskHistoryDBLayer = new SchedulerTaskHistoryDBLayer(configurationFile);
 	}

	public SchedulerTaskHistoryFilter getFilter() {
		return schedulerTaskHistoryDBLayer.getFilter();
	}

	public void resetFilter() {
		schedulerTaskHistoryDBLayer.resetFilter();
	}

	public void getData() {
		listOfSchedulerTaskHistoryDBItems = schedulerTaskHistoryDBLayer.getSchedulerHistoryListFromTo();
	}

	public void fillSchedulerIds(CCombo cbSchedulerId) {
		if (listOfSchedulerTaskHistoryDBItems != null) {
		    //Es ist schneller, einfach die gefundenen Sï¿½tze nochmal zu verwenden
		    //listOfSchedulerTaskHistoryDBSchedulersItems = schedulerTaskHistoryDBLayer.getSchedulerHistoryListSchedulersFromTo();
			Iterator schedulerHistoryEntries = listOfSchedulerTaskHistoryDBItems.iterator();
			while (schedulerHistoryEntries.hasNext()) {
				SchedulerTaskHistoryDBItem h = (SchedulerTaskHistoryDBItem) schedulerHistoryEntries.next();
				if (cbSchedulerId.indexOf(h.getSpoolerId()) < 0) {
					logger.debug("... cbSchedulerId --> : " + h.getSpoolerId());
					cbSchedulerId.add(h.getSpoolerId());
				}
			}
		}
	}

	public String getLogAsString(Table tableSchedulerHistory) {
		String log = "";
		if (tableSchedulerHistory.getSelectionIndex() >= 0) {
			TableItem t = tableSchedulerHistory.getItem(tableSchedulerHistory.getSelectionIndex());
			SchedulerTaskHistoryDBItem h = (SchedulerTaskHistoryDBItem) t.getData();
			if (h.getId() != null) {
				log = getLogAsString(h.getId());
			}
		}
		return log;
	}

	public String getLogAsString(Long id) {
		String log = "";
		try {
			SchedulerTaskHistoryDBItem schedulerHistoryDBItem = schedulerTaskHistoryDBLayer.get(id);
			if (schedulerHistoryDBItem != null && schedulerHistoryDBItem.getLog() != null) {
				log = schedulerHistoryDBItem.getLogAsString();
			}
		}
		catch (IOException e1) {
			e1.printStackTrace();
		}
		return log;
	}

	public void fillTableShort(Table table) {

		if (listOfSchedulerTaskHistoryDBItems != null) {


			Iterator schedulerHistoryEntries = listOfSchedulerTaskHistoryDBItems.iterator();
			while (schedulerHistoryEntries.hasNext()) {
				SchedulerTaskHistoryDBItem h = (SchedulerTaskHistoryDBItem) schedulerHistoryEntries.next();
				if (schedulerTaskHistoryDBLayer.getFilter().isFiltered(h)) {
				}
				else {
					final SchedulerHistoryTableItem newItemTableItem = new SchedulerHistoryTableItem(table, SWT.BORDER);
					newItemTableItem.setDBItem(h);

					logger.debug("...creating tableItem: " + h.getJobName() + ":" + table.getItemCount());
					newItemTableItem.setData(h);
					newItemTableItem.setColor();
					newItemTableItem.setColumnsShort();
				}
			}
		}
	}

	public void fillTable(Table table) {

		if (listOfSchedulerTaskHistoryDBItems != null) {
			Iterator schedulerHistoryEntries = listOfSchedulerTaskHistoryDBItems.iterator();
			while (schedulerHistoryEntries.hasNext()) {
				SchedulerTaskHistoryDBItem h = (SchedulerTaskHistoryDBItem) schedulerHistoryEntries.next();
				if (schedulerTaskHistoryDBLayer.getFilter().isFiltered(h)) {
				}
				else {
					final SchedulerHistoryTableItem newItemTableItem = new SchedulerHistoryTableItem(table, SWT.BORDER);
					newItemTableItem.setDBItem(h);

					logger.debug("...creating tableItem: " + h.getJobName() + ":" + table.getItemCount());
					newItemTableItem.setData(h);
					newItemTableItem.setColor();
					newItemTableItem.setColumns();
				}
			}
		}
	}

	@Override
	public void commit() {
		schedulerTaskHistoryDBLayer.commit();		
	}
	
	public void addToIgnorelist(SchedulerTaskHistoryDBItem h){
		schedulerTaskHistoryDBLayer.getFilter().getIgnoreList().add(h);
	}
	
	public void resetIgnoreList(){
		schedulerTaskHistoryDBLayer.getFilter().getIgnoreList().reset();
	}
	
	 
}
