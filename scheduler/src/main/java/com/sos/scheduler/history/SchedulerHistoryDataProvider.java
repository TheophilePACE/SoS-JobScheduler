/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.scheduler.history;

import java.io.File;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.prefs.Preferences;

import org.apache.log4j.Logger;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.widgets.Table;
import org.hibernate.Session;

 import com.sos.hibernate.classes.DbItem;
import com.sos.hibernate.interfaces.ISOSDashboardDataProvider;
import com.sos.hibernate.interfaces.ISOSHibernateFilter;
import com.sos.scheduler.history.db.SchedulerOrderHistoryDBItem;
import com.sos.scheduler.history.db.SchedulerTaskHistoryDBItem;


/**
* \class SchedulerHistoryDataProvider 
* 
* \brief SchedulerHistoryDataProvider - 
* 
* \details
*
* \section SchedulerHistoryDataProvider.java_intro_sec Introduction
* 
* \section SchedulerHistoryDataProvider.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 30.01.2012
* \see reference
*
* Created on 30.01.2012 10:38:56
 */

public class SchedulerHistoryDataProvider implements ISOSDashboardDataProvider {

	private static final String LIST_IGNORE_JOBS = "listIgnoreJobs";
	private static final String LIST_IGNORE_ORDERS = "listIgnoreOrders";
	private static final String SOS_DASHBOARD_EXECUTED = "sosDashboardExecuted";
	@SuppressWarnings("unused")

	private final String	conClassName	= "SchedulerHistoryDataProvider";
    
    private static Logger               logger                      = Logger.getLogger(SchedulerHistoryDataProvider.class);

	private SchedulerTaskHistoryDataProvider schedulerTaskHistoryDataProvider;
    private SchedulerOrderHistoryDataProvider schedulerOrderHistoryDataProvider;
    
    public void setJobName(String jobName) {
		schedulerTaskHistoryDataProvider.getFilter().setJobname(jobName);
    }
    
    public void setJobChain(String jobChain) {
    	schedulerOrderHistoryDataProvider.getFilter().setJobchain(jobChain);
    }
    
    public void setOrderId(String orderId) {
    	schedulerOrderHistoryDataProvider.getFilter().setOrderid(orderId);
    }
    
    public void setSearchField(String searchField) {
    	schedulerOrderHistoryDataProvider.getFilter().setSearchField(searchField);
    	schedulerTaskHistoryDataProvider.getFilter().setSearchField(searchField);
    }
    
	public void disableIgnoreList(Preferences prefs){
    	schedulerTaskHistoryDataProvider.resetIgnoreList();
		schedulerOrderHistoryDataProvider.resetIgnoreList();
	}
    
	public SchedulerHistoryDataProvider(File configurationFile) {
		schedulerTaskHistoryDataProvider = new SchedulerTaskHistoryDataProvider(configurationFile);
		schedulerOrderHistoryDataProvider = new SchedulerOrderHistoryDataProvider(configurationFile);
	}
	
	public void setShowJobs(boolean showJobs) {
		schedulerTaskHistoryDataProvider.getFilter().setShowJobs(showJobs);
		schedulerOrderHistoryDataProvider.getFilter().setShowJobs(showJobs);
		}

	public boolean getShowJobs() {
		  return schedulerTaskHistoryDataProvider.getFilter().isShowJobs();
	 	}

	public boolean getShowJobchains() {
		  return schedulerOrderHistoryDataProvider.getFilter().isShowJobChains();
	 	}

	public void setShowJobChains(boolean showJobChains) {
		schedulerTaskHistoryDataProvider.getFilter().setShowJobChains(showJobChains);
		schedulerOrderHistoryDataProvider.getFilter().setShowJobChains(showJobChains);
	}
	
	public void setFrom(Date d) {
		schedulerTaskHistoryDataProvider.getFilter().setExecutedFrom(d);
		schedulerOrderHistoryDataProvider.getFilter().setExecutedFrom(d);
	}
		
	public void setTo(Date d) {
		schedulerTaskHistoryDataProvider.getFilter().setExecutedTo(d);
		schedulerOrderHistoryDataProvider.getFilter().setExecutedTo(d);
	}
	
	public void resetFilter() {
		schedulerTaskHistoryDataProvider.resetFilter();
		schedulerOrderHistoryDataProvider.resetFilter();
	}
	
	public void getData() {
          schedulerTaskHistoryDataProvider.getData();
          schedulerOrderHistoryDataProvider.getData();    
	}
	
	public void fillTable(Table table) {
		schedulerTaskHistoryDataProvider.fillTable(table);
		schedulerOrderHistoryDataProvider.fillTable(table);
	}
	
	public void fillTableShort(Table table, boolean standalone) {
		if (standalone){
			schedulerTaskHistoryDataProvider.fillTableShort(table);
		}else {
			schedulerOrderHistoryDataProvider.fillTableShort(table);
		}
	}	
	
	public void setSchedulerId(String schedulerId) {
		schedulerTaskHistoryDataProvider.getFilter().setSchedulerId(schedulerId);
		schedulerOrderHistoryDataProvider.getFilter().setSchedulerId(schedulerId);
	}
	
	public void setJobname(String jobName) {
		schedulerTaskHistoryDataProvider.getFilter().setJobname(jobName);
 	}

	public void setJobchain(String jobChain) {
		schedulerOrderHistoryDataProvider.getFilter().setJobchain(jobChain);
 	}

	public void setOrderid(String orderId) {
		schedulerOrderHistoryDataProvider.getFilter().setOrderid(orderId);
 	}
		
	public void fillSchedulerIds(CCombo cbSchedulerId)	{
		schedulerTaskHistoryDataProvider.fillSchedulerIds(cbSchedulerId);
		schedulerOrderHistoryDataProvider.fillSchedulerIds(cbSchedulerId);
	}
	
 
	public String getLogAsString(DbItem dbItem) {
		if (dbItem.isStandalone()) {
			return schedulerTaskHistoryDataProvider.getLogAsString(dbItem.getLogId());
		}else {
			return schedulerOrderHistoryDataProvider.getLogAsString(dbItem.getLogId());
		}
		
	}
	
 
	public void addToIgnorelist(Preferences prefs,DbItem h){
		if (h.isStandalone()){
			String listOfJobs = prefs.node(SOS_DASHBOARD_EXECUTED).get(LIST_IGNORE_JOBS, "");
			listOfJobs = listOfJobs + "," + h.getJobName();
			prefs.node(SOS_DASHBOARD_EXECUTED).put(LIST_IGNORE_JOBS, listOfJobs);

    		schedulerTaskHistoryDataProvider.addToIgnorelist((SchedulerTaskHistoryDBItem)h);
		}else{
			String listOfOrders = prefs.node(SOS_DASHBOARD_EXECUTED).get(LIST_IGNORE_ORDERS, "");
			listOfOrders = listOfOrders + "," + h.getIdentifier();
			prefs.node(SOS_DASHBOARD_EXECUTED).put(LIST_IGNORE_ORDERS, listOfOrders);
			schedulerOrderHistoryDataProvider.addToIgnorelist((SchedulerOrderHistoryDBItem)h);
		}

	}

	public void resetIgnoreList(Preferences prefs){
		prefs.node(SOS_DASHBOARD_EXECUTED).put(LIST_IGNORE_JOBS, "");
		prefs.node(SOS_DASHBOARD_EXECUTED).put(LIST_IGNORE_ORDERS, "");
    	schedulerTaskHistoryDataProvider.resetIgnoreList();
		schedulerOrderHistoryDataProvider.resetIgnoreList();
			
		}
	
  
	public void setIgnoreList(Preferences prefs) {
		String listOfJobs = prefs.node(SOS_DASHBOARD_EXECUTED).get(LIST_IGNORE_JOBS, "");
		String listOfOrders = prefs.node(SOS_DASHBOARD_EXECUTED).get(LIST_IGNORE_ORDERS, "");
		
		StringTokenizer st = new StringTokenizer(listOfJobs,",");
		while (st.hasMoreTokens()){
			String jobname = st.nextToken();
			SchedulerTaskHistoryDBItem h = new SchedulerTaskHistoryDBItem();
			h.setJobName(jobname);
			schedulerTaskHistoryDataProvider.addToIgnorelist(h);
		}
		
		
		st = new StringTokenizer(listOfOrders,",");
		while (st.hasMoreTokens()){
			String order = st.nextToken();
			
			File f = new File(order);
			String jobChain = f.getParent();
			String orderId = f.getName();
			
			SchedulerOrderHistoryDBItem h = new SchedulerOrderHistoryDBItem();
			h.setJobChain(jobChain);
			h.setOrderId(orderId);
			schedulerOrderHistoryDataProvider.addToIgnorelist(h);
		}
		
	}

    @Override
    public ISOSHibernateFilter getFilter() {
        return schedulerTaskHistoryDataProvider.getFilter();
    }

    @Override
    public void setLate(boolean b) {
    }

    @Override
    public void setStatus(String statusExecuted) {
    }

    @Override
    public void beginTransaction() {
    }

    @Override
    public void update(DbItem h) {
    }

    @Override
    public void commit() {
        schedulerTaskHistoryDataProvider.commit();
    }

    @Override
    public Session getSession() {
        return null;
    }

	@Override
	public void setShowWithError(boolean b) {
        schedulerTaskHistoryDataProvider.getFilter().setShowWithError(b);       
        schedulerOrderHistoryDataProvider.getFilter().setShowWithError(b);       
	}

	@Override
	public void setShowRunning(boolean b) {
        schedulerTaskHistoryDataProvider.getFilter().setShowRunning(b);       
        schedulerOrderHistoryDataProvider.getFilter().setShowRunning(b);       
 	}

  
}
