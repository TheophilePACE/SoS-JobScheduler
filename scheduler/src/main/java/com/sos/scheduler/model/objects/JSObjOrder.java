/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.scheduler.model.objects;

import java.io.File;

import javax.xml.bind.JAXBElement;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.scheduler.model.SchedulerObjectFactory;

/**
* \class JSObjOrder
*
* \brief JSObjOrder -
*
* \details
*
* \section JSObjOrder.java_intro_sec Introduction
*
* \section JSObjOrder.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id: JSObjOrder.java 20893 2013-08-21 16:39:36Z kb $
* \see reference
*
* Created on 09.02.2011 15:04:22
 */

/**
 * @author oh
 *
 */
public class JSObjOrder extends Order {

	private final String conClassName = this.getClass().getSimpleName();
	@SuppressWarnings("unused")
	private static final String conSVNVersion = "$Id: JSObjOrder.java 20893 2013-08-21 16:39:36Z kb $";
	@SuppressWarnings("unused")
	private final Logger logger = Logger.getLogger(this.getClass());

	public final static String	fileNameExtension	= ".order.xml";

	@SuppressWarnings("unchecked")
	public JSObjOrder(final SchedulerObjectFactory schedulerObjectFactory) {
		try {
			objFactory = schedulerObjectFactory;
			objJAXBElement = (JAXBElement<JSObjBase>) unMarshal("<order/>");
			setObjectFieldsFrom(objJAXBElement.getValue());
			doInit();
		} catch (Exception e) {
			logger.error("Could not instantiate Order.",e);
			throw new JobSchedulerException("Could not instantiate Order.",e);
		}
	}

	@SuppressWarnings("unchecked")
	public JSObjOrder(final SchedulerObjectFactory schedulerObjectFactory, final String rootElementName) {
		objFactory = schedulerObjectFactory;
		objJAXBElement = (JAXBElement<JSObjBase>) unMarshal("<" + rootElementName + "/>");
		setObjectFieldsFrom(objJAXBElement.getValue());
		doInit();
	}

	@SuppressWarnings("unchecked")
	public JSObjOrder(final SchedulerObjectFactory schedulerObjectFactory, final ISOSVirtualFile pobjVirtualFile) {
		objFactory = schedulerObjectFactory;
		objJAXBElement = (JAXBElement<JSObjBase>) unMarshal(pobjVirtualFile);
		setObjectFieldsFrom(objJAXBElement.getValue());
		setHotFolderSrc(pobjVirtualFile);
		doInit();
	}

	private void doInit() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::doInit";

		super.strFileNameExtension = fileNameExtension;

	} // private void doInit

	@Override
	public RunTime getRunTime () {
		if (super.getRunTime() == null) {
			RunTime objR = new RunTime();
			super.setRunTime(objR);
		}
		return super.getRunTime();
	}
	@SuppressWarnings("unchecked")
	public JSObjOrder getOrderFromXMLString(final String xmlString) {
		objJAXBElement = (JAXBElement<JSObjBase>) unMarshal(xmlString);
		Order o = (Order) objJAXBElement.getValue();
		//TODO setzen des factory Objektes für alle untergeordneten Objekte mit genrischer Methode
		o.getRunTime().setParent(objFactory);
		setObjectFieldsFrom(o);
		return this;
	}

	//	public void setFactory(Object o) {
	//		if (o instanceof JSObjBase) {
	//			JSObjBase base = (JSObjBase)o;
	//			base.setParent(objFactory);
	//			for(Field f : base.getClass().getDeclaredFields()) {
	//				f.setAccessible(true);
	//				Object sub = (Object)f;
	//				setFactory(sub);
	//			}
	//		}
	//	}
	//
	public void setXmlContent(final String xmlContent) {
		getOrderFromXMLString(xmlContent);
	}

	public String createFileName (final String pstrPathName) {
		String strT = "";

		strT = pstrPathName + "/" + getJobChain() + "," + getId() + JSObjOrder.fileNameExtension;
		return strT;
	}


	public JSObjRunTime getJSObjRunTime() {
		JSObjRunTime runTime = new JSObjRunTime(objFactory);
		if (getRunTime()!=null) runTime.setObjectFieldsFrom(getRunTime());
		runTime.setHotFolderSrc(getHotFolderSrc());
		return runTime;
	}

	public JSObjParams getJSObjParams() {
		JSObjParams params = new JSObjParams(objFactory);
		params.setObjectFieldsFrom(getParams());
		setHotFolderSrc(getHotFolderSrc());
		return params;
	}

	@Override
	public String getObjectName() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getJobName";

		String name = this.getHotFolderSrc().getName();
		int i = name.indexOf(strFileNameExtension);
		if (i != -1) {
			name = name.substring(0, name.indexOf(strFileNameExtension));
		}

		name = new File(name).getName();

		i = name.indexOf(","); // Delimiter for assigned JobChain
		String strJobChain = "???";
		if (i > -1 && i + 1 < name.length()) {
			if (i > 0) {
				strJobChain = name.substring(0, i);
			}
			name = name.substring(i + 1) + " (" + strJobChain + ")";
		}

		return name;

	} // private String getJobName

	public String getJobChainName() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getJobChainName";

		String name = this.getHotFolderSrc().getName();
		int i = name.indexOf(strFileNameExtension);
		if (i != -1) {
			name = name.substring(0, name.indexOf(strFileNameExtension));
		}

		name = new File(name).getName();

		i = name.indexOf(","); // Delimiter for assigned JobChain
		String strJobChain = "???";
		if (i > -1 && i + 1 < name.length()) {
			if (i > 0) {
				strJobChain = name.substring(0, i);
			}
		}

		return strJobChain;

	} // private String getJobName

}
