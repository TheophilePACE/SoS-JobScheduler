/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.scheduler.model.objects;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.DateTimeComparator;
import org.joda.time.Interval;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.sos.scheduler.model.SchedulerObjectFactory;
import com.sos.scheduler.model.tools.JodaTools;

/**
* \class JSObjWeekdaysDays 
* 
* \brief JSObjWeekdaysDays - 
* 
* \details
*
* \section JSObjWeekdaysDays.java_intro_sec Introduction
*
* \section JSObjWeekdaysDays.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id: JSObjHolidaysWeekdaysDay.java 20718 2013-07-18 18:16:10Z kb $
* \see reference
*
* Created on 09.02.2011 15:24:39
 */

/**
 * @author ss
 *
 */
	public class JSObjHolidaysWeekdaysDay extends Holidays.Weekdays.Day {
		
		private static final Logger	logger			= Logger.getLogger(JSObjWeekdays.class);

		public JSObjHolidaysWeekdaysDay (SchedulerObjectFactory schedulerObjectFactory) {
			super();
			objFactory = schedulerObjectFactory;
		}

		public List<DateTime> getDtHolidays(Interval timeRange) {
			List<DateTime> result = new ArrayList<DateTime>();
			List<DateTime> work = getNextSingleStarts(timeRange.getStart());
			for(DateTime date : work) {
				if(timeRange.contains(date)) {
					while(timeRange.contains(date)) {
						result.add(date);
						date = date.plusWeeks(1);
					}
				}
			}
			Collections.sort(result, DateTimeComparator.getInstance());
			return result;
		}

		private List<DateTime> getNextSingleStarts(DateTime baseDate) {
			DateTimeFormatter fmtDate = DateTimeFormat.forPattern("yyyy-MM-dd");
			DateTimeFormatter fmtDateTime = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			List<DateTime> result = new ArrayList<DateTime>();
			logger.debug(getDay().size() + " day elements detected.");
			Iterator<String> it = getDay().iterator();
			while(it.hasNext()) {
				String dayString = it.next();
				logger.debug("parsing day string " + dayString);
				List<Integer> days = JodaTools.getJodaWeekdays(dayString);
				for (int i = 0; i < days.size(); i++) {
					DateTime nextWeekDay = JodaTools.getNextWeekday(baseDate, days.get(i));
					logger.debug("calculated date " + fmtDate.print(nextWeekDay));
					if (nextWeekDay.isBefore(baseDate)) {
						nextWeekDay = nextWeekDay.plusWeeks(1);
						logger.debug("start is corrected to " + fmtDateTime.print(nextWeekDay));
					}
					result.add( nextWeekDay );
				}
				Collections.sort(result, DateTimeComparator.getInstance());
			}
			return result;
		}

	}
