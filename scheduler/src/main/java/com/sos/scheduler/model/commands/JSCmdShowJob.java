/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.scheduler.model.commands;

import java.math.BigInteger;

import org.apache.log4j.Logger;

import com.sos.scheduler.model.SchedulerObjectFactory;
import com.sos.scheduler.model.answers.Job;

/**
* \class JSCmdShowJob 
* 
* \brief JSCmdShowJob - 
* 
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: JSCmdShowJob.java 20718 2013-07-18 18:16:10Z kb $18.01.2011
* \see reference
*
* Created on 18.01.2011 18:28:20
 */

public class JSCmdShowJob extends ShowJob {

	private final String		conClassName	= "JSCmdShowJob";
	@SuppressWarnings("unused")
	private static final Logger	logger			= Logger.getLogger(JSCmdShowJob.class);

	public static enum enu4What {
		task_queue, job_params, job_orders, job_commands, description, log, run_time, task_history, source

		/**/;
		public String Text() {
			String strT = this.name();
			return strT;
		}
	}

	public JSCmdShowJob(SchedulerObjectFactory schedulerObjectFactory) {
		super();
		objFactory = schedulerObjectFactory;
	}

	/**
	 * 
	 * \brief setWhat
	 * 
	 * \details
	 *
	 * @param penuT
	 */
	public void setWhat(enu4What penuT) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setWhat";

		super.setWhat(penuT.Text());

	} // private void setWhat

	/**
	 * 
	 * \brief setWhat
	 * 
	 * \details
	 *
	 * @param penuT
	 */
	public void setWhat(enu4What[] penuT) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setWhat";

		String strT = "";
		for (enu4What enuState4What : penuT) {
			strT += enuState4What.Text() + " ";
		}
		super.setWhat(strT);

	} // private JSCmdShowTask setWhat

	public Job getJobAnswer() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getAnswer";

		Job objAnswer = null;

		return objAnswer;
	} // private Job getAnswer

	public JSCmdShowJob MaxOrders(final int pintMaxOrders) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::MaxOrders";

		super.setMaxOrders(BigInteger.valueOf(pintMaxOrders));

		return this;
	} // private this MaxOrders

	public JSCmdShowJob MaxTaskHistory(final int pintMaxTaskHistory) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::MaxTaskHistory";

		super.setMaxTaskHistory(BigInteger.valueOf(pintMaxTaskHistory));

		return this;
	} // private this MaxTaskHistory

	/**
	 * \brief getjobName
	 *
	 * \details
	 * getter 
	 *
	 * @return the jobName
	 */
	public String getJobName() {
		return super.getJob();
	}

	/**
	 * \brief setjobName - 
	 *
	 * \details
	 * setter 
	 *
	 * @param jobName the value for jobName to set
	 */
	public void setJobName(String jobName) {
		super.setJob(jobName);
	}

}
