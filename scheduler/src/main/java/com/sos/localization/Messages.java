/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.localization;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.UnknownFormatConversionException;
import java.util.regex.Matcher;

import org.apache.log4j.Logger;

/**
* \class Messages
*
* \brief Messages -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: Messages.java 20891 2013-08-21 16:35:49Z kb $03.09.2010
* \see reference
*
* Created on 03.09.2010 13:10:49
 */
public class Messages implements Serializable {
	/**
	 *
	 */
	private static final long	serialVersionUID	= -1276188512965716159L;
	private final String				conClassName		= "Messages";
	private String				BUNDLE_NAME			= "com.sos.localization.messages";	//$NON-NLS-1$
	private ResourceBundle		objResource_Bundle	= null;
	private ResourceBundle		objResourceBundleDefault	= null;
	private Locale				objCurrentLocale	= Locale.getDefault();
	private static final Logger	logger				= Logger.getLogger(Messages.class);
	private static final String	ENCODING_KEY		= "properties.file.encoding";
	
	private enuEncodings		enuEncoding			= enuEncodings.ISO_8859_1;
	private final enuEncodings	enuEncodingDefault	= enuEncodings.ISO_8859_1;
	
	public static enum enuEncodings {
		ISO_8859_1, UTF_8
		/* */;

		public String text() {
			String strT = this.name().toUpperCase().replace('_', '-');
			return strT;
		}
	}

	@SuppressWarnings("unused")
	private Messages() {
	}

	public Messages(final String pstrBundleName) {
		BUNDLE_NAME = pstrBundleName;
		String strSOSLocale = System.getenv("SOS_LOCALE");
		if (strSOSLocale == null) {
			objCurrentLocale = Locale.getDefault();
		}
		else {
			objCurrentLocale = new Locale(strSOSLocale);
		}
		objResource_Bundle = this.getBundle();
	}

	public Messages(final String pstrBundleName, final Locale pobjLocale) {
		BUNDLE_NAME = pstrBundleName;
		objCurrentLocale = pobjLocale;
		objResource_Bundle = this.getBundle();
	}

	public ResourceBundle getBundle() {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getBundle";
		ResourceBundle objB = null;
		try {
			objB = ResourceBundle.getBundle(BUNDLE_NAME, objCurrentLocale);
			// logger.debug(String.format("current ResourceBundle is %1$s, locale is %2$s.", BUNDLE_NAME, objB.getLocale().getLanguage()));
			//readEncodingFromMessageFile(objB);
			setEncoding(objB);
		} 
		catch (MissingResourceException mb){
			try{//Try to get local default
    			objB = ResourceBundle.getBundle(BUNDLE_NAME);
			}
			catch (MissingResourceException mbb){
				objB = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
			}

		}
		catch (Exception e) {
			e.printStackTrace(System.err);
		}
		objResourceBundleDefault = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
		return objB;
	} // private ResourceBundle getBundle

	public void setLocale(final Locale pobjLocale) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setLocale";
		objCurrentLocale = pobjLocale;
	} // private void setLocale
	
	
//	private void readEncodingFromMessageFile(final ResourceBundle objB) {
//		String messageFile = BUNDLE_NAME.replace('.', '/');
//		String language = objB.getLocale().getLanguage();
//		if(language != null && language.length() > 0) {
//			messageFile += "_" + language;
//		}
//		messageFile += ".properties";
//		InputStream messagesInputStream = getClass().getClassLoader().getResourceAsStream(messageFile);
//		if(messagesInputStream != null) {
//			try {
//				byte bom[] = new byte[2];
//				int read = messagesInputStream.read(bom);
//				if (read == 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
////					logger.debug(String.format("UTF-8 bom found in %1$s", messageFile));
//					enuEncoding = enuEncodings.UTF_8;
//				}
//			}
//			catch (IOException e) {}
//			finally {
//				try {
//					messagesInputStream.close();
//				}
//				catch (IOException e) {}
//			}
////			logger.debug(String.format("Message encoding: %1$s", enuEncoding.text()));
//		}
//	}
	
	
	private void setEncoding(final ResourceBundle objBundle) {
		try {
			String strM = null;
			if (objBundle != null) {
				strM = objBundle.getString(ENCODING_KEY);
				if (strM != null && strM.equalsIgnoreCase(enuEncodings.UTF_8.text())) {
					enuEncoding		= enuEncodings.UTF_8;
				}
			}
		}
		catch (MissingResourceException e) {}
	}

	private String getString(final String pstrKey, final ResourceBundle objBundle) {
		try {
			String strM = "";
			if (objResource_Bundle == null) {
				objResource_Bundle = getBundle();
			}
			enuEncodings encoding = enuEncoding;
			if (objResource_Bundle != null) {
				try {
					strM = objResource_Bundle.getString(pstrKey);
				}
				catch (MissingResourceException e) {
					strM = objResourceBundleDefault.getString(pstrKey);
					encoding = enuEncodingDefault;
				}

				if (strM == null) {
					strM = pstrKey;
				}
				else {
					// strM = this.getMsg(pstrKey);
					// link to another key?
					if (strM.startsWith("[") && strM.endsWith("]")) { //$NON-NLS-1$
						strM = getString(strM.substring(1, strM.length() - 1), objBundle);
					}
				}
			}
			else {
				strM = pstrKey;
			}
			try {
				if (encoding == enuEncodings.UTF_8) {
					String strT = new String(strM.getBytes(enuEncodings.ISO_8859_1.text()), enuEncodings.UTF_8.text());
					if (strT.contains("ï¿½") == false) {
						strM = strT;
					}
				}
			}
			catch (UnsupportedEncodingException e) {
			}
			return strM;
		}
		catch (MissingResourceException e) {
			return null;
		}
	}

	/**
	 *
	 * \brief getMsg
	 *
	 * \details
	 *
	 * \return String
	 *
	 * @param pstrKey
	 * @return
	 */
	public String getMsg(final String pstrKey) {
		String strM = "";
		try {
			strM = addKey(pstrKey, getString(pstrKey, objResource_Bundle));
		}
		catch (MissingResourceException e) {
			strM = '!' + pstrKey + '!';
		}
		return strM;
	}

	private String addKey(final String pstrKey, final String pstrMsgTxt) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::addKey";
		String strRet = pstrMsgTxt;

		if (pstrMsgTxt != null) {
			if (pstrKey != null) {
				if (pstrKey.contains("_T_") == false // Text
						&& pstrKey.contains("_L_") == false // Label, like Text
				) {
					strRet = pstrKey + ": " + pstrMsgTxt;
				}
			}

		}
		else {
			strRet = pstrKey;
		}

		return strRet;
	} // private String addKey

	public String getLabel(final String pstrKey) {
		try {
			String strM = getString(pstrKey, objResource_Bundle);
			return strM;
		}
		catch (MissingResourceException e) {
			return '!' + pstrKey + '!';
		}
	}

	public String getTooltip(final String pstrKey) {
		try {
			String strM = getString(pstrKey, objResource_Bundle);
			return strM;
		}
		catch (MissingResourceException e) {
			return '!' + pstrKey + '!';
		}
	}

	public String getMsg(final String pstrKey, final Object... pstrArgs) {
		String strM = "";
		try {
			strM = addKey (pstrKey, getString(pstrKey, objResource_Bundle));
			strM = String.format(strM, pstrArgs);

			// To support the old {x} format in messages
			int i = 0;
			if (strM.contains("{")) {
				for (Object object : pstrArgs) {
					String strT = (String) object;

					strT = Matcher.quoteReplacement(strT); 
					strM = strM.replaceAll("\\{" + i++ + "\\}", strT);
				}
			}
			return strM;
		}
		catch (MissingFormatArgumentException e) {
			strM = String.format("%1$s (%2$s): %3$s | missing format specifer: %4$s", pstrKey, objCurrentLocale.getDisplayName(), strM, e.getFormatSpecifier());
			return strM;
		}
		catch (UnknownFormatConversionException e) {
			strM = String.format("%1$s (%2$s): %3$s | unknown format conversion: %4$s", pstrKey, objCurrentLocale.getDisplayName(), strM, e.getConversion());
			return strM;
		}
		catch (MissingResourceException e) {
			strM = String.format("%1$s (%2$s): %3$s", pstrKey, objCurrentLocale.getDisplayName(), strM);
			return strM;
		}
		catch (Exception e) {
			e.printStackTrace(System.err);
			return strM;
		}
	}

	/**
	 *
	 * \brief getMsg
	 *
	 * \details
	 *
	 * \return String
	 *
	 * @param pstrKey
	 * @param pobjLocale
	 * @return
	 */
	public String getMsg(final String pstrKey, final Locale pobjLocale) {
		String strM = "";
		try {
			// ResourceBundle objBundle = ResourceBundle.getBundle(BUNDLE_NAME, pobjLocale);
			if (objCurrentLocale != pobjLocale) {
				objResource_Bundle = null;
			}
			objCurrentLocale = pobjLocale;
			strM = addKey(pstrKey, getString(pstrKey, objResource_Bundle));
		}
		catch (MissingResourceException e) {
			strM = '!' + pstrKey + '!';
		}
		return strM;
	}
}
