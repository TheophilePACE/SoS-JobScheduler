/**
 * Copyright (C) 2014 BigLoupe http://bigloupe.github.io/SoS-JobScheduler/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
/********************************************************* begin of preamble
**
** Copyright (C) 2003-2012 Software- und Organisations-Service GmbH. 
** All rights reserved.
**
** This file may be used under the terms of either the 
**
**   GNU General Public License version 2.0 (GPL)
**
**   as published by the Free Software Foundation
**   http://www.gnu.org/licenses/gpl-2.0.txt and appearing in the file
**   LICENSE.GPL included in the packaging of this file. 
**
** or the
**  
**   Agreement for Purchase and Licensing
**
**   as offered by Software- und Organisations-Service GmbH
**   in the respective terms of supply that ship with this file.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
** IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
** PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
** BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
********************************************************** end of preamble*/
package com.sos.dialog.classes;

  
 
import java.util.Arrays;

import org.apache.log4j.Logger; 
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;

import com.sos.JSHelper.Basics.JSToolBox;
import com.sos.dialog.comparators.SortBaseComparator;
import com.sos.hibernate.classes.SosSortTableItem;


/**
* \class FormBase 
* 
* \brief FormBase - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 06.02.2012 16:23:36
 */

/**
 * @author KB
 *
 */
public class FormBase extends JSToolBox {
	private static final int				RIGHT_MOUSE_BUTTON					= 3;

	@SuppressWarnings("unused")
	private final String		conClassName	= "FormBase";
	private static final String	conSVNVersion	= "$Id$";
	private static final Logger	logger			= Logger.getLogger(FormBase.class);

	protected Composite			objParent		= null;
	protected Shell				shell			= null;
	protected Cursor			objLastCursor	= null;
	protected int colPosForSort;
	protected boolean colSortFlag=false;

	private boolean							rightMouseclick;

	protected FormBase() {
		//
	}

	public FormBase(Composite pParentComposite, String className) {
		super(className);
		objParent = pParentComposite;
		shell = pParentComposite.getShell();
		pParentComposite.setLayout(new GridLayout());
	}

	protected void setResizableV(Control objControl) {
		boolean flgGrapVerticalspace = true;
		objControl.setLayoutData(new GridData(GridData.FILL, GridData.FILL, true, flgGrapVerticalspace));
	}

	public void clearTable(Table table) {
		table.clearAll();
		int l = table.getItemCount();
		for (int i = 0; i < l; i++) {
			TableItem t = table.getItem(table.getItemCount() - 1);
			t.dispose();
		}
	}
	 
	public int getIntValue(String s, int d) {
		try {

			return Integer.parseInt(s);
		}
		catch (NumberFormatException n) {
			return d;
		}
	}
	
	protected void showWaitCursor() {
		if (!shell.isDisposed())
			objLastCursor = shell.getCursor();
		shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT));
	}

	protected void RestoreCursor() {
		if (!shell.isDisposed())
			if (objLastCursor == null) {
				shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_ARROW));
			}
			else {
				shell.setCursor(objLastCursor);
			}
	}

  public boolean isRightMouseclick() {
		return rightMouseclick;
	}


	public void setRightMausclick(boolean b) {
		rightMouseclick = b;
	}

	public void setRightMausclick(Event event) {
		setRightMausclick((event.button == RIGHT_MOUSE_BUTTON));
	}

	protected Shell getShell() {
		return shell;
	}
	
	
	
	
	protected final void sortTable(Table table,  SortBaseComparator[][] comparables) {

		for (int i = 0; i < comparables[colPosForSort].length; i++) {
			comparables[colPosForSort][i]._sortFlag = colSortFlag;
		}

		Arrays.sort(comparables[colPosForSort]);

		SosSortTableItem tmpSortTableItem = new SosSortTableItem();

		for (int i = 0; i < table.getItemCount(); i++) {
			tmpSortTableItem.setTextBuffer(comparables[colPosForSort][i].sosSortTableItem.getTextBuffer());
            tmpSortTableItem.setBackground(comparables[colPosForSort][i].sosSortTableItem.getBackground());
            tmpSortTableItem.setForeground(comparables[colPosForSort][i].sosSortTableItem.getForeground());
            tmpSortTableItem.setBackgroundColumn(comparables[colPosForSort][i].sosSortTableItem.getBackgroundColumn());
            tmpSortTableItem.setForegroundColumn(comparables[colPosForSort][i].sosSortTableItem.getForegroundColumn());
			tmpSortTableItem.setData(comparables[colPosForSort][i].sosSortTableItem.getData());

			table.getItems()[i].setText(tmpSortTableItem.getTextBuffer());
            table.getItems()[i].setBackground(tmpSortTableItem.getBackground());
            table.getItems()[i].setForeground(tmpSortTableItem.getForeground());

            if (tmpSortTableItem.getBackgroundColumn() != null) {
            for (int ii=0;ii<tmpSortTableItem.getBackgroundColumn().length;ii++) {
               table.getItems()[i].setBackground(ii,tmpSortTableItem.getBackgroundColumn()[ii]);
               table.getItems()[i].setForeground(ii,tmpSortTableItem.getForegroundColumn()[ii]);
            }
            }
			table.getItems()[i].setData(tmpSortTableItem.getData());
		}

	}

	 
	 
}
